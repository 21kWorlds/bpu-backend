// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: PUOjAEVuITrD
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicInventoryModal.module.css"; // plasmic-import: PUOjAEVuITrD/css

createPlasmicElementProxy;

export const PlasmicInventoryModal__VariantProps = new Array("edit");

export const PlasmicInventoryModal__ArgProps = new Array("contact");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInventoryModal__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          contact: {
            first_name: "Elizabeth",
            last_name: "Garcia",
            email: "elizabeth.garcia@example.com",
            phone_number: "+1-715-881-6976",
            partnershiptype: "Caterer",
            id: "8329e76d-7de8-48c2-bfd2-71d33ba5cbb4"
          }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "edit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.edit
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <AntdModal
      data-plasmic-name={"modal"}
      data-plasmic-override={overrides.modal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.modal
      )}
      defaultStylesClassName={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens
      )}
      maskClosable={true}
      modalScopeClassName={sty["modal__modal"]}
      onCancel={async () => {
        const $steps = {};
        $steps["updateModalOpen"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["modal", "open"]
                },
                operation: 0,
                value: false
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;
                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateModalOpen"] != null &&
          typeof $steps["updateModalOpen"] === "object" &&
          typeof $steps["updateModalOpen"].then === "function"
        ) {
          $steps["updateModalOpen"] = await $steps["updateModalOpen"];
        }
      }}
      onOk={async () => {
        const $steps = {};
        $steps["postgresCreate"] = true
          ? (() => {
              const actionArgs = {
                dataOp: {
                  sourceId: "4ACnaEgTThrwyGmam4pjE6",
                  opId: "9bd0520e-3f34-45f3-b6d6-39e8a864b362",
                  userArgs: {
                    variables: [$state.form.value]
                  },
                  cacheKey: null,
                  invalidatedKeys: ["plasmic_refresh_all"],
                  roleId: null
                }
              };
              return (async ({ dataOp, continueOnError }) => {
                try {
                  const response = await executePlasmicDataOp(dataOp, {
                    userAuthToken: dataSourcesCtx?.userAuthToken,
                    user: dataSourcesCtx?.user
                  });
                  await plasmicInvalidate(dataOp.invalidatedKeys);
                  return response;
                } catch (e) {
                  if (!continueOnError) {
                    throw e;
                  }
                  return e;
                }
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["postgresCreate"] != null &&
          typeof $steps["postgresCreate"] === "object" &&
          typeof $steps["postgresCreate"].then === "function"
        ) {
          $steps["postgresCreate"] = await $steps["postgresCreate"];
        }
        $steps["updateModalOpen"] = true
          ? (() => {
              const actionArgs = {
                variable: {
                  objRoot: $state,
                  variablePath: ["modal", "open"]
                },
                operation: 0,
                value: false
              };
              return (({ variable, value, startIndex, deleteCount }) => {
                if (!variable) {
                  return;
                }
                const { objRoot, variablePath } = variable;
                $stateSet(objRoot, variablePath, value);
                return value;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateModalOpen"] != null &&
          typeof $steps["updateModalOpen"] === "object" &&
          typeof $steps["updateModalOpen"].then === "function"
        ) {
          $steps["updateModalOpen"] = await $steps["updateModalOpen"];
        }
      }}
      onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
      open={generateStateValueProp($state, ["modal", "open"])}
      title={
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pmbyp,
            { [sty.textedit__pmbyPoZ3It]: hasVariant($state, "edit", "edit") }
          )}
        >
          {hasVariant($state, "edit", "edit")
            ? "Update Inventory"
            : "New Inventory"}
        </div>
      }
      trigger={
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g9Ysv
            )}
          >
            {"New Inventory Item"}
          </div>
        </AntdButton>
      }
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["form", "value"],
            FormWrapper_Helpers
          ),
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],

          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};
            $steps["defaultSubmit"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "4ACnaEgTThrwyGmam4pjE6",
                      opId: "04202d2e-1789-4b92-9139-6b02c386d50b",
                      userArgs: {
                        variables: [$state.form.value]
                      },
                      cacheKey: null,
                      invalidatedKeys: ["plasmic_refresh_all"],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["defaultSubmit"] != null &&
              typeof $steps["defaultSubmit"] === "object" &&
              typeof $steps["defaultSubmit"].then === "function"
            ) {
              $steps["defaultSubmit"] = await $steps["defaultSubmit"];
            }
          },
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["form", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],

          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___6Sol6, {
                [sty.formFieldedit___6Sol6OZ3It]: hasVariant(
                  $state,
                  "edit",
                  "edit"
                )
              })}
              initialValue={undefined}
              label={"memo"}
              name={"memo"}
              rules={[
                {
                  ruleType: "required",
                  message: "Please add a description of the item"
                }
              ]}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input4),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input4", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input4", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input4.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input4"}
                    data-plasmic-override={overrides.input4}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__sCjGf)}
                initialValue={undefined}
                label={"category"}
                name={"category"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input5),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input5", "value"],
                      AntdInput_Helpers
                    ),
                    value: generateStateValueProp($state, ["input5", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input5.value"
                      }
                    ],

                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdInput
                      data-plasmic-name={"input5"}
                      data-plasmic-override={overrides.input5}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__tjf80)}
                initialValue={undefined}
                label={"price"}
                name={"price"}
              >
                <AntdInputNumber
                  data-plasmic-name={"numberInput2"}
                  data-plasmic-override={overrides.numberInput2}
                  className={classNames("__wab_instance", sty.numberInput2)}
                  onChange={generateStateOnChangeProp($state, [
                    "numberInput2",
                    "value"
                  ])}
                  type={"number"}
                  value={generateStateValueProp($state, [
                    "numberInput2",
                    "value"
                  ])}
                />
              </FormItemWrapper>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__wwX4K)}
                initialValue={undefined}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q9HkW
                    )}
                  >
                    {"Label"}
                  </div>
                }
                name={"qty"}
                noLabel={true}
              >
                <AntdCheckbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  checked={generateStateValueProp($state, [
                    "checkbox",
                    "checked"
                  ])}
                  className={classNames("__wab_instance", sty.checkbox)}
                  onChange={generateStateOnChangeProp($state, [
                    "checkbox",
                    "checked"
                  ])}
                >
                  {"qty"}
                </AntdCheckbox>
              </FormItemWrapper>
            </div>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___9PQi)}
              initialValue={undefined}
              label={"notes"}
              name={"notes"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input6),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input6", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input6", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input6.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input6"}
                    data-plasmic-override={overrides.input6}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__pb48L)}
              hidden={true}
              initialValue={(() => {
                try {
                  return $props.contact.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vvw1B
                  )}
                >
                  {"partnerID"}
                </div>
              }
              name={"partnerID"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input3),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input3", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input3", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input3.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
          </FormWrapper>
        );
      })()}
    </AntdModal>
  );
}

const PlasmicDescendants = {
  modal: [
    "modal",
    "form",
    "input4",
    "freeBox",
    "input5",
    "numberInput2",
    "checkbox",
    "input6",
    "input3",
    "button"
  ],

  form: [
    "form",
    "input4",
    "freeBox",
    "input5",
    "numberInput2",
    "checkbox",
    "input6",
    "input3"
  ],

  input4: ["input4"],
  freeBox: ["freeBox", "input5", "numberInput2", "checkbox"],
  input5: ["input5"],
  numberInput2: ["numberInput2"],
  checkbox: ["checkbox"],
  input6: ["input6"],
  input3: ["input3"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInventoryModal__ArgProps,
          internalVariantPropNames: PlasmicInventoryModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInventoryModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "modal") {
    func.displayName = "PlasmicInventoryModal";
  } else {
    func.displayName = `PlasmicInventoryModal.${nodeName}`;
  }
  return func;
}

export const PlasmicInventoryModal = Object.assign(
  // Top-level PlasmicInventoryModal renders the root element
  makeNodeComponent("modal"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input4: makeNodeComponent("input4"),
    freeBox: makeNodeComponent("freeBox"),
    input5: makeNodeComponent("input5"),
    numberInput2: makeNodeComponent("numberInput2"),
    checkbox: makeNodeComponent("checkbox"),
    input6: makeNodeComponent("input6"),
    input3: makeNodeComponent("input3"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicInventoryModal
    internalVariantProps: PlasmicInventoryModal__VariantProps,
    internalArgProps: PlasmicInventoryModal__ArgProps
  }
);

export default PlasmicInventoryModal;
/* prettier-ignore-end */
