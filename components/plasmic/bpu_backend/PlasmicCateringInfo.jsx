// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: _umXE26So9su
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Card from "../../Card"; // plasmic-import: 8T8zBtcWG137/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicCateringInfo.module.css"; // plasmic-import: _umXE26So9su/css

createPlasmicElementProxy;

export const PlasmicCateringInfo__VariantProps = new Array();

export const PlasmicCateringInfo__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCateringInfo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    caterers: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "6bf2848d-8037-4279-a90d-f41b7d17974f",
        userArgs: {},
        cacheKey: `plasmic.$.6bf2848d-8037-4279-a90d-f41b7d17974f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    inventory: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "071801a9-a178-4a6f-be48-a07880c78913",
        userArgs: {},
        cacheKey: `plasmic.$.071801a9-a178-4a6f-be48-a07880c78913.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__iPjPk)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.caterers.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <section
                  className={classNames(projectcss.all, sty.section__kGb5P)}
                  key={currentIndex}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f4Cbi)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__wtm19
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.website;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Website";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__hthYl
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.email;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "You won't believe what happens next.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__g2CsG
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.phoneNumber;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "You won't believe what happens next.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h3>
                  </div>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__cyfMw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.display_notes;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mZaap)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o94IU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tp1H3
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Memo"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6IOna
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Price"}
                          </span>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cAtgg
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Notes"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.inventory.data.filter(
                            obj => obj.partnerID === currentItem.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___44Uzk
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k1TGf
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.memo;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Memo";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dJlNw
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "$" + currentItem.price.toFixed(2);
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Price";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ePRq8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.notes;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Notes";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </section>
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox__kQhHq)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.inventory.data.filter(
                      item => item.category === "Snacks"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Card
                    data-plasmic-name={"card"}
                    data-plasmic-override={overrides.card}
                    className={classNames("__wab_instance", sty.card)}
                    key={currentIndex}
                    title={
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.memo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Card title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__edupn
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "$" + currentItem.price.toFixed(2);
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "something here";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lOyEf
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.notes;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "something here";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Card>
                );
              })}
            </div>
            <section className={classNames(projectcss.all, sty.section__cNx99)}>
              <div className={classNames(projectcss.all, sty.freeBox__fk4Pr)}>
                <div className={classNames(projectcss.all, sty.freeBox__ecr7A)}>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__whLj
                    )}
                  >
                    {"Select Caterer: "}
                  </h4>
                  <AntdSelect
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    onChange={generateStateOnChangeProp($state, [
                      "select",
                      "value"
                    ])}
                    options={(() => {
                      try {
                        return $queries.caterers.data.map(caterer => ({
                          value: caterer.id,
                          label: caterer.name
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"Select..."}
                    popupScopeClassName={sty["select__popup"]}
                    value={generateStateValueProp($state, ["select", "value"])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mlf76)}>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__eRkTs
                    )}
                  >
                    {"Select Snacks: "}
                  </h4>
                  <AntdSelect
                    data-plasmic-name={"select4"}
                    data-plasmic-override={overrides.select4}
                    className={classNames("__wab_instance", sty.select4)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    onChange={generateStateOnChangeProp($state, [
                      "select4",
                      "value"
                    ])}
                    options={(() => {
                      try {
                        return $queries.inventory.data
                          .filter(item => item.category === "Snacks")
                          .map(item => ({
                            value: item.id,
                            label: item.memo
                          }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [
                            {
                              value: "option1",
                              label: "Option 1",
                              type: "option"
                            },
                            {
                              value: "option2",
                              label: "Option 2",
                              type: "option"
                            }
                          ];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={"Select..."}
                    popupScopeClassName={sty["select4__popup"]}
                    value={generateStateValueProp($state, ["select4", "value"])}
                  />
                </div>
              </div>
            </section>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "h1", "card", "select", "select4"],
  h1: ["h1"],
  card: ["card"],
  select: ["select"],
  select4: ["select4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCateringInfo__ArgProps,
          internalVariantPropNames: PlasmicCateringInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCateringInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCateringInfo";
  } else {
    func.displayName = `PlasmicCateringInfo.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"m9sTNijpsuGxLr6622n67c"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "m9sTNijpsuGxLr6622n67c"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCateringInfo = Object.assign(
  // Top-level PlasmicCateringInfo renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    card: makeNodeComponent("card"),
    select: makeNodeComponent("select"),
    select4: makeNodeComponent("select4"),
    // Metadata about props expected for PlasmicCateringInfo
    internalVariantProps: PlasmicCateringInfo__VariantProps,
    internalArgProps: PlasmicCateringInfo__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCateringInfo;
/* prettier-ignore-end */
