// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: hnqvFgiVnaZy
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import Card from "../../Card"; // plasmic-import: 8T8zBtcWG137/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicCommunityCaterer.module.css"; // plasmic-import: hnqvFgiVnaZy/css

createPlasmicElementProxy;

export const PlasmicCommunityCaterer__VariantProps = new Array();

export const PlasmicCommunityCaterer__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCommunityCaterer__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdCheckbox
        data-plasmic-name={"checkbox"}
        data-plasmic-override={overrides.checkbox}
        checked={generateStateValueProp($state, ["checkbox", "checked"])}
        className={classNames("__wab_instance", sty.checkbox)}
        onChange={generateStateOnChangeProp($state, ["checkbox", "checked"])}
      >
        <Card
          data-plasmic-name={"card"}
          data-plasmic-override={overrides.card}
          className={classNames("__wab_instance", sty.card)}
          title={"Catering & Snack Options"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hNi8I
            )}
          >
            {"Caterer Website, email, phone number"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dk9Jw
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Standard - $xx | "}
              </span>
              <React.Fragment>{"Brief description\n"}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Alter"}
              </span>
              <React.Fragment>{"n"}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"ativ"}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"e"}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {" - $xx | "}
              </span>
              <React.Fragment>{"Brief description \n"}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Alternative 2 - $xx | "}
              </span>
              <React.Fragment>{"Brief description"}</React.Fragment>
            </React.Fragment>
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <AntdCheckbox
              data-plasmic-name={"checkbox2"}
              data-plasmic-override={overrides.checkbox2}
              checked={generateStateValueProp($state, ["checkbox2", "checked"])}
              className={classNames("__wab_instance", sty.checkbox2)}
              onChange={generateStateOnChangeProp($state, [
                "checkbox2",
                "checked"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3JwQg
                )}
              >
                {"Standard "}
              </div>
            </AntdCheckbox>
            <AntdCheckbox
              data-plasmic-name={"checkbox3"}
              data-plasmic-override={overrides.checkbox3}
              checked={generateStateValueProp($state, ["checkbox3", "checked"])}
              className={classNames("__wab_instance", sty.checkbox3)}
              onChange={generateStateOnChangeProp($state, [
                "checkbox3",
                "checked"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tcIPv
                )}
              >
                {"Alternative"}
              </div>
            </AntdCheckbox>
            <AntdCheckbox
              data-plasmic-name={"checkbox4"}
              data-plasmic-override={overrides.checkbox4}
              checked={generateStateValueProp($state, ["checkbox4", "checked"])}
              className={classNames("__wab_instance", sty.checkbox4)}
              onChange={generateStateOnChangeProp($state, [
                "checkbox4",
                "checked"
              ])}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uYqRo
                )}
              >
                {"Custom"}
              </div>
            </AntdCheckbox>
          </div>
          {(() => {
            try {
              return $state.checkbox4.checked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wbgy3
              )}
            >
              {
                "*We can coordinate the standard and alternative options, but for custom options, please reach out to the caterer directly"
              }
            </div>
          ) : null}
        </Card>
      </AntdCheckbox>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkbox",
    "card",
    "freeBox",
    "checkbox2",
    "checkbox3",
    "checkbox4"
  ],

  checkbox: [
    "checkbox",
    "card",
    "freeBox",
    "checkbox2",
    "checkbox3",
    "checkbox4"
  ],

  card: ["card", "freeBox", "checkbox2", "checkbox3", "checkbox4"],
  freeBox: ["freeBox", "checkbox2", "checkbox3", "checkbox4"],
  checkbox2: ["checkbox2"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCommunityCaterer__ArgProps,
          internalVariantPropNames: PlasmicCommunityCaterer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCommunityCaterer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommunityCaterer";
  } else {
    func.displayName = `PlasmicCommunityCaterer.${nodeName}`;
  }
  return func;
}

export const PlasmicCommunityCaterer = Object.assign(
  // Top-level PlasmicCommunityCaterer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkbox: makeNodeComponent("checkbox"),
    card: makeNodeComponent("card"),
    freeBox: makeNodeComponent("freeBox"),
    checkbox2: makeNodeComponent("checkbox2"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    // Metadata about props expected for PlasmicCommunityCaterer
    internalVariantProps: PlasmicCommunityCaterer__VariantProps,
    internalArgProps: PlasmicCommunityCaterer__ArgProps
  }
);

export default PlasmicCommunityCaterer;
/* prettier-ignore-end */
