// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: vQVS53MpXGDW
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicClientIntakeForm.module.css"; // plasmic-import: vQVS53MpXGDW/css

createPlasmicElementProxy;

export const PlasmicClientIntakeForm__VariantProps = new Array();

export const PlasmicClientIntakeForm__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClientIntakeForm__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "public2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "eventStart2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "eventEnd2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lodgeIn2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lodgeOut2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "libraryIn2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "libraryOut2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "kitchenIn2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "kitchenOut2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "ballroom2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "techHours2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "understood2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subAmount2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "title2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "subReason2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "description2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "date2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "clientNotes2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cateringPref2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "coffeePref2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "presentation2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sound2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "staging2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lighting2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "carafeNo2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lodgeHrs",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const parseTime = time => {
                  const [hours, minutes] = time.split(":").map(Number);
                  return {
                    hours,
                    minutes
                  };
                };
                const calculateHoursDifference = (startTime, endTime) => {
                  const start = parseTime(startTime);
                  const end = parseTime(endTime);
                  const startDate = new Date(
                    0,
                    0,
                    0,
                    start.hours,
                    start.minutes
                  );
                  const endDate = new Date(0, 0, 0, end.hours, end.minutes);
                  let diff = (endDate - startDate) / 3600000;
                  if (diff < 0) {
                    diff += 24;
                  }
                  return diff;
                };
                return calculateHoursDifference(
                  $state.form2.value.lodge_start,
                  $state.form2.value.lodge_end
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "libraryHours",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const parseTime = time => {
                  const [hours, minutes] = time.split(":").map(Number);
                  return {
                    hours,
                    minutes
                  };
                };
                const calculateHoursDifference = (startTime, endTime) => {
                  const start = parseTime(startTime);
                  const end = parseTime(endTime);
                  const startDate = new Date(
                    0,
                    0,
                    0,
                    start.hours,
                    start.minutes
                  );
                  const endDate = new Date(0, 0, 0, end.hours, end.minutes);
                  let diff = (endDate - startDate) / 3600000;
                  if (diff < 0) {
                    diff += 24;
                  }
                  return diff;
                };
                return calculateHoursDifference(
                  $state.form2.value.library_start,
                  $state.form2.value.library_end
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "kitchenHours",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const parseTime = time => {
                  const [hours, minutes] = time.split(":").map(Number);
                  return {
                    hours,
                    minutes
                  };
                };
                const calculateHoursDifference = (startTime, endTime) => {
                  const start = parseTime(startTime);
                  const end = parseTime(endTime);
                  const startDate = new Date(
                    0,
                    0,
                    0,
                    start.hours,
                    start.minutes
                  );
                  const endDate = new Date(0, 0, 0, end.hours, end.minutes);
                  let diff = (endDate - startDate) / 3600000;
                  if (diff < 0) {
                    diff += 24;
                  }
                  return diff;
                };
                return calculateHoursDifference(
                  $state.form2.value.kitchen_start,
                  $state.form2.value.kitchen_end
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/bpu_backend/images/_060116WaHallreopeningcelebrationCreditSticksStonesPhotography42Jpeg2.jpg",
              fullWidth: 2481,
              fullHeight: 817,
              aspectRatio: undefined
            }}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.form2),
              extendedOnValuesChange:
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["form2", "value"],
                  FormWrapper_Helpers
                ),
              formItems: [
                { label: "Name", name: "name", inputType: "Text" },
                { label: "Message", name: "message", inputType: "Text Area" }
              ],

              labelCol: { span: 8, horizontalOnly: true },
              layout: "vertical",
              mode: "advanced",
              onFinish: async values => {
                const $steps = {};
                $steps["defaultSubmit"] = true
                  ? (() => {
                      const actionArgs = {
                        dataOp: {
                          sourceId: "4ACnaEgTThrwyGmam4pjE6",
                          opId: "413fb99d-58fc-41c9-8604-49bc73903f60",
                          userArgs: {
                            variables: [$state.form2.value]
                          },
                          cacheKey: null,
                          invalidatedKeys: ["plasmic_refresh_all"],
                          roleId: null
                        }
                      };
                      return (async ({ dataOp, continueOnError }) => {
                        try {
                          const response = await executePlasmicDataOp(dataOp, {
                            userAuthToken: dataSourcesCtx?.userAuthToken,
                            user: dataSourcesCtx?.user
                          });
                          await plasmicInvalidate(dataOp.invalidatedKeys);
                          return response;
                        } catch (e) {
                          if (!continueOnError) {
                            throw e;
                          }
                          return e;
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["defaultSubmit"] != null &&
                  typeof $steps["defaultSubmit"] === "object" &&
                  typeof $steps["defaultSubmit"].then === "function"
                ) {
                  $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                }
              },
              onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["form2", "isSubmitting"],
                FormWrapper_Helpers
              ),
              ref: ref => {
                $refs["form2"] = ref;
              },
              submitSlot: null,
              wrapperCol: { span: 16, horizontalOnly: true }
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "form2.value"
                },
                {
                  name: "isSubmitting",
                  plasmicStateName: "form2.isSubmitting"
                }
              ],

              [],
              FormWrapper_Helpers ?? {},
              child$Props
            );
            return (
              <FormWrapper
                data-plasmic-name={"form2"}
                data-plasmic-override={overrides.form2}
                {...child$Props}
              >
                <section
                  className={classNames(projectcss.all, sty.section___6Gzo0)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__tsNe2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "Hello " + $ctx.query.name + ",";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___15HGt
                    )}
                  >
                    {
                      "We received your inquiry to rent space on the first floor of Washington Hall, and we look forward to hosting you! "
                    }
                  </h4>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jF9If
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          "Your rental supports Creative Justice, an arts-based healing engaged space for "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FF000D" }}
                      >
                        {
                          "youth and young adults impacted by the school-to-prison-to-deportation pipeline. "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          "We are located on the first floor of Washington Hall. Five days a week Creative Justice facilitates "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFB300" }}
                      >
                        {
                          "arts-based healing, restorative justice programming and opportunities for youth and young adults ages 13-23."
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          " The majority of participants at Creative Justice are Black, Indigenous, youth of color. Participants, in addition to having access to daily arts and culture programming, also receive weekly stipends and basic needs support. This includes "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#0068FB" }}
                      >
                        {
                          "food, housing, transportation, restitution relief, system advocacy and systems navigation support."
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          " Both Black Power Unlimited and Creative Justice are Black-led organizations located at the historic Washington Hall in the historically Black Central District. We work collaboratively for our communal well-being and the economic health of our organizations, because we know that we are stronger together. "
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FF00CE" }}
                      >
                        {"Your rental supports this mission! "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {
                          "Thank you for partnering with us to provide sustainable arts and cultural spaces for our communities to thrive."
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wip1Y
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "#000000",
                          fontStyle: "italic",
                          textDecorationLine: "underline"
                        }}
                      >
                        {
                          "Please fill out this form, and we'll get back to you with an official quote"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__jphmO)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__fmHxc
                    )}
                  >
                    {"Basic Info"}
                  </h1>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___6ByXb
                    )}
                  >
                    {"Please tell us about your event!"}
                  </h3>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___12Zu3)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__xBGw5
                      )}
                    >
                      {"Title:"}
                    </h4>
                    <FormItemWrapper
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames("__wab_instance", sty.title)}
                      initialValue={undefined}
                      label={"title"}
                      name={"title"}
                      noLabel={true}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.title2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["title2", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "title2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "title2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"title2"}
                            data-plasmic-override={overrides.title2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"_public"}
                      data-plasmic-override={overrides._public}
                      className={classNames("__wab_instance", sty._public)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vHcxf
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      name={"public"}
                      noLabel={true}
                    >
                      <AntdCheckbox
                        data-plasmic-name={"public2"}
                        data-plasmic-override={overrides.public2}
                        checked={generateStateValueProp($state, [
                          "public2",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.public2)}
                        onChange={generateStateOnChangeProp($state, [
                          "public2",
                          "checked"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__abS
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h4
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h4,
                                  projectcss.__wab_text,
                                  sty.h4__hbD6
                                )}
                              >
                                {"Public"}
                              </h4>
                            }

                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>
                      </AntdCheckbox>
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eNDi)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__ezs61
                      )}
                    >
                      {"Description"}
                    </h4>
                    <FormItemWrapper
                      data-plasmic-name={"description"}
                      data-plasmic-override={overrides.description}
                      className={classNames("__wab_instance", sty.description)}
                      initialValue={undefined}
                      label={"description"}
                      name={"description"}
                      noLabel={true}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: false,
                          className: classNames(
                            "__wab_instance",
                            sty.description2
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["description2", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "description2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "description2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"description2"}
                            data-plasmic-override={overrides.description2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gp251)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__vDam5
                      )}
                    >
                      {"Date:"}
                    </h4>
                    <FormItemWrapper
                      data-plasmic-name={"date"}
                      data-plasmic-override={overrides.date}
                      className={classNames("__wab_instance", sty.date)}
                      initialValue={undefined}
                      label={"date"}
                      name={"date"}
                      noLabel={true}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: true,
                          className: classNames("__wab_instance", sty.date2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["date2", "value"],
                            AntdDatePicker_Helpers
                          ),
                          popupClassName: classNames({
                            [sty["pcls_Vq93kmLB7vrf"]]: true
                          }),
                          popupScopeClassName: sty["date2__datePickerPopup"],
                          value: generateStateValueProp($state, [
                            "date2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "date2.value"
                            }
                          ],

                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdDatePicker
                            data-plasmic-name={"date2"}
                            data-plasmic-override={overrides.date2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__sdegO
                      )}
                    >
                      {"Start:"}
                    </h4>
                    <FormItemWrapper
                      data-plasmic-name={"eventStart"}
                      data-plasmic-override={overrides.eventStart}
                      className={classNames("__wab_instance", sty.eventStart)}
                      initialValue={undefined}
                      label={"event_start"}
                      name={"event_start"}
                      noLabel={true}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          className: classNames(
                            "__wab_instance",
                            sty.eventStart2
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["eventStart2", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "eventStart2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "eventStart2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"eventStart2"}
                            data-plasmic-override={overrides.eventStart2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__m9F3
                      )}
                    >
                      {"End:"}
                    </h4>
                    <FormItemWrapper
                      data-plasmic-name={"eventEnd"}
                      data-plasmic-override={overrides.eventEnd}
                      className={classNames("__wab_instance", sty.eventEnd)}
                      initialValue={undefined}
                      label={"event_end"}
                      name={"event_end"}
                      noLabel={true}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          className: classNames(
                            "__wab_instance",
                            sty.eventEnd2
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["eventEnd2", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "eventEnd2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "eventEnd2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"eventEnd2"}
                            data-plasmic-override={overrides.eventEnd2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__tAIp
                    )}
                  >
                    {"When would you like to have access to each space?"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uiNiV
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic", color: "#000000" }}
                      >
                        {
                          "Please include at least one hour for setting up before your event and one hour for clean up after"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z8Lwh)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yiVoF)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"lodgeIn"}
                        data-plasmic-override={overrides.lodgeIn}
                        className={classNames("__wab_instance", sty.lodgeIn)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e1JI6
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Lodge In"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"lodge_start"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.lodgeIn2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["lodgeIn2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "lodgeIn2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "lodgeIn2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"lodgeIn2"}
                              data-plasmic-override={overrides.lodgeIn2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"lodgeOut"}
                        data-plasmic-override={overrides.lodgeOut}
                        className={classNames("__wab_instance", sty.lodgeOut)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cJaz
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Lodge Out"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"lodge_end"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.lodgeOut2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["lodgeOut2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "lodgeOut2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "lodgeOut2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"lodgeOut2"}
                              data-plasmic-override={overrides.lodgeOut2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k1R5
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700, color: "#000000" }}
                          >
                            {"$150/hr"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h12B9)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"libraryIn"}
                        data-plasmic-override={overrides.libraryIn}
                        className={classNames("__wab_instance", sty.libraryIn)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___70EAo
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Library In"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"library_start"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.libraryIn2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["libraryIn2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "libraryIn2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "libraryIn2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"libraryIn2"}
                              data-plasmic-override={overrides.libraryIn2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"libraryOut"}
                        data-plasmic-override={overrides.libraryOut}
                        className={classNames("__wab_instance", sty.libraryOut)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ojJvk
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Library Out"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"library_end"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.libraryOut2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["libraryOut2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "libraryOut2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "libraryOut2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"libraryOut2"}
                              data-plasmic-override={overrides.libraryOut2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x3DP
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700, color: "#000000" }}
                          >
                            {"$75/hr"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wIIs1)}
                    >
                      <FormItemWrapper
                        data-plasmic-name={"kitchenIn"}
                        data-plasmic-override={overrides.kitchenIn}
                        className={classNames("__wab_instance", sty.kitchenIn)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__slVia
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Kitchen In"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"kitchen_start"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.kitchenIn2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["kitchenIn2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "kitchenIn2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "kitchenIn2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"kitchenIn2"}
                              data-plasmic-override={overrides.kitchenIn2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        data-plasmic-name={"kitchenOut"}
                        data-plasmic-override={overrides.kitchenOut}
                        className={classNames("__wab_instance", sty.kitchenOut)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ox3Nc
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700, color: "#000000" }}
                              >
                                {"Kitchen Out"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"kitchen_end"}
                      >
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames(
                              "__wab_instance",
                              sty.kitchenOut2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["kitchenOut2", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "kitchenOut2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "kitchenOut2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"kitchenOut2"}
                              data-plasmic-override={overrides.kitchenOut2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dDqps
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700, color: "#000000" }}
                          >
                            {"$100/hr"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                    <FormItemWrapper
                      data-plasmic-name={"ballroom"}
                      data-plasmic-override={overrides.ballroom}
                      className={classNames("__wab_instance", sty.ballroom)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iBzPy
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      name={"ballroom"}
                      noLabel={true}
                    >
                      <AntdCheckbox
                        data-plasmic-name={"ballroom2"}
                        data-plasmic-override={overrides.ballroom2}
                        checked={generateStateValueProp($state, [
                          "ballroom2",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.ballroom2)}
                        onChange={generateStateOnChangeProp($state, [
                          "ballroom2",
                          "checked"
                        ])}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ia6Q4
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Ballroom"}
                            </span>
                          </React.Fragment>
                        </div>
                      </AntdCheckbox>
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3AI6P
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic", color: "#000000" }}
                      >
                        {
                          "We charge a $150 cleaning fee in the lodge, although we still ask that you clean up after yourself in the kitchen"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__nkPsL)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__zzndV
                    )}
                  >
                    {"Food & Beverage"}
                  </h1>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__fuFlu
                    )}
                  >
                    {"Will you be having food at your event?"}
                  </h4>
                  <FormItemWrapper
                    data-plasmic-name={"cateringPref"}
                    data-plasmic-override={overrides.cateringPref}
                    className={classNames("__wab_instance", sty.cateringPref)}
                    initialValue={undefined}
                    label={"catering_pref"}
                    name={"catering_pref"}
                    noLabel={true}
                  >
                    <AntdSelect
                      data-plasmic-name={"cateringPref2"}
                      data-plasmic-override={overrides.cateringPref2}
                      allowClear={true}
                      className={classNames(
                        "__wab_instance",
                        sty.cateringPref2
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={generateStateOnChangeProp($state, [
                        "cateringPref2",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" },
                          { type: "option", value: null, label: null },
                          { type: "option", value: null, label: null }
                        ];

                        __composite["0"]["value"] = "community";
                        __composite["0"]["label"] =
                          "Please send me information about your community caterers!";
                        __composite["1"]["value"] = "outside";
                        __composite["1"]["label"] =
                          "I'd like to bring in a caterer";
                        __composite["2"]["value"] = "snacks";
                        __composite["2"]["label"] =
                          "Please tell me about your snack packages";
                        __composite["3"]["value"] = "outsnack";
                        __composite["3"]["label"] =
                          "I plan on bringing my own snacks";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["cateringPref2__popup"]}
                      value={generateStateValueProp($state, [
                        "cateringPref2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__n8Qhv
                    )}
                  >
                    {"Can Creative Cafe provide you with coffee service?"}
                  </h4>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___28NDf)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"coffeePref"}
                      data-plasmic-override={overrides.coffeePref}
                      className={classNames("__wab_instance", sty.coffeePref)}
                      initialValue={undefined}
                      label={"coffee_pref"}
                      name={"coffee_pref"}
                      noLabel={true}
                    >
                      <AntdSelect
                        data-plasmic-name={"coffeePref2"}
                        data-plasmic-override={overrides.coffeePref2}
                        allowClear={true}
                        className={classNames(
                          "__wab_instance",
                          sty.coffeePref2
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "coffeePref2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { value: null, label: null, type: "option" },
                            { type: "option", value: null, label: null }
                          ];

                          __composite["0"]["value"] = "standard";
                          __composite["0"]["label"] =
                            "The standard package please!";
                          __composite["1"]["value"] = "carafes";
                          __composite["1"]["label"] = "Only carafes";
                          __composite["2"]["value"] = "custom";
                          __composite["2"]["label"] =
                            "Let's discuss other options";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["coffeePref2__popup"]}
                        value={generateStateValueProp($state, [
                          "coffeePref2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    {(() => {
                      try {
                        return $state.form2.value.coffee_pref == "carafes";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b4UzK
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700, color: "#000000" }}
                          >
                            {"Carafes"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {":"}
                          </span>
                        </React.Fragment>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.form2.value.coffee_pref == "carafes";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        data-plasmic-name={"carafeNo"}
                        data-plasmic-override={overrides.carafeNo}
                        className={classNames("__wab_instance", sty.carafeNo)}
                        hidden={false}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__er3Br
                            )}
                          >
                            {"carafe_no"}
                          </div>
                        }
                        name={"carafe_no"}
                        noLabel={true}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.carafeNo2
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["carafeNo2", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: "#",
                            type: "number",
                            value: generateStateValueProp($state, [
                              "carafeNo2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "carafeNo2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"carafeNo2"}
                              data-plasmic-override={overrides.carafeNo2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                    ) : null}
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__dopes)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___2Ojgb
                    )}
                  >
                    {"Technology & Equipment"}
                  </h1>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__swo46
                    )}
                  >
                    {"What equipment will make your event a success?"}
                  </h4>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tdpn0)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"staging"}
                      data-plasmic-override={overrides.staging}
                      className={classNames("__wab_instance", sty.staging)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hYWgc
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Staging"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"staging"}
                    >
                      <AntdSelect
                        data-plasmic-name={"staging2"}
                        data-plasmic-override={overrides.staging2}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.staging2)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "staging2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { type: "option", value: null, label: null },
                            { type: "option", value: null, label: null },
                            { type: "option", value: null, label: null }
                          ];

                          __composite["0"]["value"] = "two of one";
                          __composite["0"]["label"] = "(2) of 1";
                          __composite["1"]["value"] = "four of two";
                          __composite["1"]["label"] = "(4) of 2";
                          __composite["2"]["value"] = "all eight";
                          __composite["2"]["label"] = "All (8) Panels";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["staging2__popup"]}
                        value={generateStateValueProp($state, [
                          "staging2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"lighting"}
                      data-plasmic-override={overrides.lighting}
                      className={classNames("__wab_instance", sty.lighting)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2WTSx
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Lighting"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"lighting"}
                    >
                      <AntdSelect
                        data-plasmic-name={"lighting2"}
                        data-plasmic-override={overrides.lighting2}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.lighting2)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "lighting2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { value: null, label: null, type: "option" }
                          ];

                          __composite["0"]["value"] = "small";
                          __composite["0"]["label"] = "Small";
                          __composite["1"]["value"] = "large";
                          __composite["1"]["label"] = "Large";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["lighting2__popup"]}
                        value={generateStateValueProp($state, [
                          "lighting2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"sound"}
                      data-plasmic-override={overrides.sound}
                      className={classNames("__wab_instance", sty.sound)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fu3S
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Sound"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"sound"}
                    >
                      <AntdSelect
                        data-plasmic-name={"sound2"}
                        data-plasmic-override={overrides.sound2}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.sound2)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "sound2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { value: null, label: null, type: "option" },
                            { type: "option", value: null, label: null }
                          ];

                          __composite["0"]["value"] = "small";
                          __composite["0"]["label"] = "Small";
                          __composite["1"]["value"] = "medium";
                          __composite["1"]["label"] = "Medium";
                          __composite["2"]["value"] = "large";
                          __composite["2"]["label"] = "Large";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["sound2__popup"]}
                        value={generateStateValueProp($state, [
                          "sound2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"presentation"}
                      data-plasmic-override={overrides.presentation}
                      className={classNames("__wab_instance", sty.presentation)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9EWi
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Presentation"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"presentation"}
                    >
                      <AntdSelect
                        data-plasmic-name={"presentation2"}
                        data-plasmic-override={overrides.presentation2}
                        allowClear={true}
                        className={classNames(
                          "__wab_instance",
                          sty.presentation2
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "presentation2",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { value: null, label: null, type: "option" }
                          ];

                          __composite["0"]["value"] = "projector";
                          __composite["0"]["label"] = "Projector";
                          __composite["1"]["value"] = "smartboard";
                          __composite["1"]["label"] = "SmartBoard";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["presentation2__popup"]}
                        value={generateStateValueProp($state, [
                          "presentation2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"techHours"}
                      data-plasmic-override={overrides.techHours}
                      className={classNames("__wab_instance", sty.techHours)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fziF
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700, color: "#000000" }}
                            >
                              {"Tech Hours"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"tech_hrs"}
                    >
                      <AntdInputNumber
                        data-plasmic-name={"techHours2"}
                        data-plasmic-override={overrides.techHours2}
                        className={classNames("__wab_instance", sty.techHours2)}
                        onChange={generateStateOnChangeProp($state, [
                          "techHours2",
                          "value"
                        ])}
                        placeholder={"#"}
                        type={"number"}
                        value={generateStateValueProp($state, [
                          "techHours2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                  </div>
                  {(() => {
                    try {
                      return $state.form2.value.presentation == "smartboard";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s014H)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__egSxJ
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#000000", fontWeight: 700 }}
                          >
                            {
                              "***We have high speed internet for live streaming large events, but you must bring your own cameras. Please acknowledge below"
                            }
                          </span>
                        </React.Fragment>
                      </div>
                      <FormItemWrapper
                        data-plasmic-name={"understood"}
                        data-plasmic-override={overrides.understood}
                        className={classNames("__wab_instance", sty.understood)}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ucbWv
                            )}
                          >
                            {"Label"}
                          </div>
                        }
                        name={"understood"}
                        noLabel={true}
                      >
                        <AntdCheckbox
                          data-plasmic-name={"understood2"}
                          data-plasmic-override={overrides.understood2}
                          checked={generateStateValueProp($state, [
                            "understood2",
                            "checked"
                          ])}
                          className={classNames(
                            "__wab_instance",
                            sty.understood2
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "understood2",
                            "checked"
                          ])}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e5Bn0
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#000000", fontWeight: 700 }}
                              >
                                {"I understand"}
                              </span>
                            </React.Fragment>
                          </div>
                        </AntdCheckbox>
                      </FormItemWrapper>
                    </div>
                  ) : null}
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__ilnK8
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecorationLine: "underline" }}
                      >
                        {"Pricing"}
                      </span>
                    </React.Fragment>
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bpImO
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"Staging"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {
                          "Comes in panels to assemble. Two of each of the following sizes are available:"
                        }
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-_T1cyz1fvJ5i)",
                          fontWeight: 700
                        }}
                      >
                        {"3'x6'"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-_T1cyz1fvJ5i)",
                          fontWeight: 700
                        }}
                      >
                        {"3'x12'"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-_T1cyz1fvJ5i)",
                          fontWeight: 700
                        }}
                      >
                        {"3'x18'"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-_T1cyz1fvJ5i)",
                          fontWeight: 700
                        }}
                      >
                        {"3'x24'"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"(2) of 1 size:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$100 + $75"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {" set up | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"(4) of 2 sizes:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$200 + $125"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {" set up | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"All (8):"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$300 + $175"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"set up"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"***"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "#000000",
                          fontWeight: 700,
                          textDecorationLine: "underline"
                        }}
                      >
                        {"Lighting"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Small:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$100 + $100 "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"set up |"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Large: "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$250 + $150"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"set up"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"***"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"Sound"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Small:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$100"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Medium:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$125"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Large:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$225"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"+ $125"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000", fontWeight: 700 }}
                      >
                        {" set up"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000", fontWeight: 700 }}
                      >
                        {"***"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"Presentation"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Projector:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$50 + $150"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"set up | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-ALRRMWaCvqGz)",
                          fontWeight: 700
                        }}
                      >
                        {"Smartboard:"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          color: "var(--token-TKaKr6sHpQPw)",
                          fontWeight: 700
                        }}
                      >
                        {"$100 + $50"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"set up"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {"***"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"T"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"echnician"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {" H"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"r"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "#000000",
                          textDecorationLine: "underline"
                        }}
                      >
                        {"s"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 400,
                          color: "#000000",
                          fontStyle: "italic"
                        }}
                      >
                        {"(B"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 400,
                          color: "#000000",
                          fontStyle: "italic"
                        }}
                      >
                        {"eyond set up)"}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "var(--token-ALRRMWaCvqGz)"
                        }}
                      >
                        {"Minimum 2 hours"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {" | "}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "var(--token-TKaKr6sHpQPw)"
                        }}
                      >
                        {"$30/hr"}
                      </span>
                    </React.Fragment>
                  </div>
                </section>
                <section
                  className={classNames(projectcss.all, sty.section__vnO0G)}
                >
                  <FormItemWrapper
                    data-plasmic-name={"clientNotes"}
                    data-plasmic-override={overrides.clientNotes}
                    className={classNames("__wab_instance", sty.clientNotes)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eJgv8
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h4
                              className={classNames(
                                projectcss.all,
                                projectcss.h4,
                                projectcss.__wab_text,
                                sty.h4__adaJn
                              )}
                            >
                              {"Would you like to tell us anything else?"}
                            </h4>
                          }

                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    }
                    name={"client_notes"}
                  >
                    <textarea
                      data-plasmic-name={"clientNotes2"}
                      data-plasmic-override={overrides.clientNotes2}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.clientNotes2
                      )}
                      onChange={e => {
                        generateStateOnChangeProp($state, [
                          "clientNotes2",
                          "value"
                        ])(e.target.value);
                      }}
                      ref={ref => {
                        $refs["clientNotes2"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, [
                          "clientNotes2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </FormItemWrapper>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yjFz
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#000000" }}
                      >
                        {
                          "BPU receives grant funding to help sponsor events for under-served communities. This funding is not always available, and BPU reserves the right to award sponsorships at its sole discretion. If you would like to apply, please let us know how much you're requesting, and a brief description of how it will help your organization."
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ipIfx)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"subAmount"}
                      data-plasmic-override={overrides.subAmount}
                      className={classNames("__wab_instance", sty.subAmount)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__uaH
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000", fontWeight: 700 }}
                            >
                              {"Request Amount"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"sub_amount"}
                    >
                      <AntdInputNumber
                        data-plasmic-name={"subAmount2"}
                        data-plasmic-override={overrides.subAmount2}
                        className={classNames("__wab_instance", sty.subAmount2)}
                        onChange={generateStateOnChangeProp($state, [
                          "subAmount2",
                          "value"
                        ])}
                        type={"number"}
                        value={generateStateValueProp($state, [
                          "subAmount2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      data-plasmic-name={"subReason"}
                      data-plasmic-override={overrides.subReason}
                      className={classNames("__wab_instance", sty.subReason)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__deAXv
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#000000", fontWeight: 700 }}
                            >
                              {
                                "Brief explanation how event serves our mission:"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"sub_reason"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.subReason2
                          ),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["subReason2", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "subReason2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "subReason2.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"subReason2"}
                            data-plasmic-override={overrides.subReason2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <AntdButton
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    onClick={async () => {
                      const $steps = {};
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rqtK6
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </section>
              </FormWrapper>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "form2",
    "title",
    "title2",
    "_public",
    "public2",
    "description",
    "description2",
    "date",
    "date2",
    "eventStart",
    "eventStart2",
    "eventEnd",
    "eventEnd2",
    "lodgeIn",
    "lodgeIn2",
    "lodgeOut",
    "lodgeOut2",
    "libraryIn",
    "libraryIn2",
    "libraryOut",
    "libraryOut2",
    "kitchenIn",
    "kitchenIn2",
    "kitchenOut",
    "kitchenOut2",
    "ballroom",
    "ballroom2",
    "cateringPref",
    "cateringPref2",
    "coffeePref",
    "coffeePref2",
    "carafeNo",
    "carafeNo2",
    "staging",
    "staging2",
    "lighting",
    "lighting2",
    "sound",
    "sound2",
    "presentation",
    "presentation2",
    "techHours",
    "techHours2",
    "understood",
    "understood2",
    "clientNotes",
    "clientNotes2",
    "subAmount",
    "subAmount2",
    "subReason",
    "subReason2",
    "button"
  ],

  img: ["img"],
  form2: [
    "form2",
    "title",
    "title2",
    "_public",
    "public2",
    "description",
    "description2",
    "date",
    "date2",
    "eventStart",
    "eventStart2",
    "eventEnd",
    "eventEnd2",
    "lodgeIn",
    "lodgeIn2",
    "lodgeOut",
    "lodgeOut2",
    "libraryIn",
    "libraryIn2",
    "libraryOut",
    "libraryOut2",
    "kitchenIn",
    "kitchenIn2",
    "kitchenOut",
    "kitchenOut2",
    "ballroom",
    "ballroom2",
    "cateringPref",
    "cateringPref2",
    "coffeePref",
    "coffeePref2",
    "carafeNo",
    "carafeNo2",
    "staging",
    "staging2",
    "lighting",
    "lighting2",
    "sound",
    "sound2",
    "presentation",
    "presentation2",
    "techHours",
    "techHours2",
    "understood",
    "understood2",
    "clientNotes",
    "clientNotes2",
    "subAmount",
    "subAmount2",
    "subReason",
    "subReason2",
    "button"
  ],

  title: ["title", "title2"],
  title2: ["title2"],
  _public: ["_public", "public2"],
  public2: ["public2"],
  description: ["description", "description2"],
  description2: ["description2"],
  date: ["date", "date2"],
  date2: ["date2"],
  eventStart: ["eventStart", "eventStart2"],
  eventStart2: ["eventStart2"],
  eventEnd: ["eventEnd", "eventEnd2"],
  eventEnd2: ["eventEnd2"],
  lodgeIn: ["lodgeIn", "lodgeIn2"],
  lodgeIn2: ["lodgeIn2"],
  lodgeOut: ["lodgeOut", "lodgeOut2"],
  lodgeOut2: ["lodgeOut2"],
  libraryIn: ["libraryIn", "libraryIn2"],
  libraryIn2: ["libraryIn2"],
  libraryOut: ["libraryOut", "libraryOut2"],
  libraryOut2: ["libraryOut2"],
  kitchenIn: ["kitchenIn", "kitchenIn2"],
  kitchenIn2: ["kitchenIn2"],
  kitchenOut: ["kitchenOut", "kitchenOut2"],
  kitchenOut2: ["kitchenOut2"],
  ballroom: ["ballroom", "ballroom2"],
  ballroom2: ["ballroom2"],
  cateringPref: ["cateringPref", "cateringPref2"],
  cateringPref2: ["cateringPref2"],
  coffeePref: ["coffeePref", "coffeePref2"],
  coffeePref2: ["coffeePref2"],
  carafeNo: ["carafeNo", "carafeNo2"],
  carafeNo2: ["carafeNo2"],
  staging: ["staging", "staging2"],
  staging2: ["staging2"],
  lighting: ["lighting", "lighting2"],
  lighting2: ["lighting2"],
  sound: ["sound", "sound2"],
  sound2: ["sound2"],
  presentation: ["presentation", "presentation2"],
  presentation2: ["presentation2"],
  techHours: ["techHours", "techHours2"],
  techHours2: ["techHours2"],
  understood: ["understood", "understood2"],
  understood2: ["understood2"],
  clientNotes: ["clientNotes", "clientNotes2"],
  clientNotes2: ["clientNotes2"],
  subAmount: ["subAmount", "subAmount2"],
  subAmount2: ["subAmount2"],
  subReason: ["subReason", "subReason2"],
  subReason2: ["subReason2"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClientIntakeForm__ArgProps,
          internalVariantPropNames: PlasmicClientIntakeForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClientIntakeForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicClientIntakeForm";
  } else {
    func.displayName = `PlasmicClientIntakeForm.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"m9sTNijpsuGxLr6622n67c"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "m9sTNijpsuGxLr6622n67c"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicClientIntakeForm = Object.assign(
  // Top-level PlasmicClientIntakeForm renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    form2: makeNodeComponent("form2"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    _public: makeNodeComponent("_public"),
    public2: makeNodeComponent("public2"),
    description: makeNodeComponent("description"),
    description2: makeNodeComponent("description2"),
    date: makeNodeComponent("date"),
    date2: makeNodeComponent("date2"),
    eventStart: makeNodeComponent("eventStart"),
    eventStart2: makeNodeComponent("eventStart2"),
    eventEnd: makeNodeComponent("eventEnd"),
    eventEnd2: makeNodeComponent("eventEnd2"),
    lodgeIn: makeNodeComponent("lodgeIn"),
    lodgeIn2: makeNodeComponent("lodgeIn2"),
    lodgeOut: makeNodeComponent("lodgeOut"),
    lodgeOut2: makeNodeComponent("lodgeOut2"),
    libraryIn: makeNodeComponent("libraryIn"),
    libraryIn2: makeNodeComponent("libraryIn2"),
    libraryOut: makeNodeComponent("libraryOut"),
    libraryOut2: makeNodeComponent("libraryOut2"),
    kitchenIn: makeNodeComponent("kitchenIn"),
    kitchenIn2: makeNodeComponent("kitchenIn2"),
    kitchenOut: makeNodeComponent("kitchenOut"),
    kitchenOut2: makeNodeComponent("kitchenOut2"),
    ballroom: makeNodeComponent("ballroom"),
    ballroom2: makeNodeComponent("ballroom2"),
    cateringPref: makeNodeComponent("cateringPref"),
    cateringPref2: makeNodeComponent("cateringPref2"),
    coffeePref: makeNodeComponent("coffeePref"),
    coffeePref2: makeNodeComponent("coffeePref2"),
    carafeNo: makeNodeComponent("carafeNo"),
    carafeNo2: makeNodeComponent("carafeNo2"),
    staging: makeNodeComponent("staging"),
    staging2: makeNodeComponent("staging2"),
    lighting: makeNodeComponent("lighting"),
    lighting2: makeNodeComponent("lighting2"),
    sound: makeNodeComponent("sound"),
    sound2: makeNodeComponent("sound2"),
    presentation: makeNodeComponent("presentation"),
    presentation2: makeNodeComponent("presentation2"),
    techHours: makeNodeComponent("techHours"),
    techHours2: makeNodeComponent("techHours2"),
    understood: makeNodeComponent("understood"),
    understood2: makeNodeComponent("understood2"),
    clientNotes: makeNodeComponent("clientNotes"),
    clientNotes2: makeNodeComponent("clientNotes2"),
    subAmount: makeNodeComponent("subAmount"),
    subAmount2: makeNodeComponent("subAmount2"),
    subReason: makeNodeComponent("subReason"),
    subReason2: makeNodeComponent("subReason2"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicClientIntakeForm
    internalVariantProps: PlasmicClientIntakeForm__VariantProps,
    internalArgProps: PlasmicClientIntakeForm__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicClientIntakeForm;
/* prettier-ignore-end */
