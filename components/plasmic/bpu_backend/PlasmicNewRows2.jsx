// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: NP6K4NtaonuD
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicNewRows2.module.css"; // plasmic-import: NP6K4NtaonuD/css

createPlasmicElementProxy;

export const PlasmicNewRows2__VariantProps = new Array();

export const PlasmicNewRows2__ArgProps = new Array("partners");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewRows2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          partners: { name: "Joshua", id: "8" }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isOrg.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "iMemo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "switch2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "iCat.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "form3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form3",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form3.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form3",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "boSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bNotes.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    partners: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "55033fda-3f36-4022-9a94-4af9a2025e11",
        userArgs: {},
        cacheKey: `plasmic.$.55033fda-3f36-4022-9a94-4af9a2025e11.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (() => {
    const child$Props = {
      activeKey: generateStateValueProp($state, ["accordion", "activePanelId"]),
      bordered: true,
      className: classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.accordion
      ),
      items: (
        <React.Fragment>
          <AntdAccordionItem
            className={classNames("__wab_instance", sty.accordionItem___1Gzv8)}
            id={"1"}
            label2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qfAMe
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"New Booking"}
                  </span>
                </React.Fragment>
              </div>
            }
            showArrow={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form3),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form3", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};
                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "4ACnaEgTThrwyGmam4pjE6",
                            opId: "d5fbdb12-91cb-4d56-98e6-c95be225bd99",
                            userArgs: {
                              variables: [$state.form3.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form3", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form3"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form3.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form3.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form3"}
                  data-plasmic-override={overrides.form3}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__knWm5)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"contactId"}
                      data-plasmic-override={overrides.contactId}
                      className={classNames("__wab_instance", sty.contactId)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cWvMk
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Contact"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"contactID"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        data-plasmic-name={"select4"}
                        data-plasmic-override={overrides.select4}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.select4)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "select4",
                          "value"
                        ])}
                        options={(() => {
                          try {
                            return $queries.partners.data
                              .filter(item => item.isOrg === false)
                              .map(item => ({
                                label: item.name,
                                value: item.id
                              }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={
                          <div
                            data-plasmic-name={"bcSelect"}
                            data-plasmic-override={overrides.bcSelect}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.bcSelect
                            )}
                          >
                            {"Select..."}
                          </div>
                        }
                        popupScopeClassName={sty["select4__popup"]}
                        value={generateStateValueProp($state, [
                          "select4",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__t37V1
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vujLv
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Organization"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"OrgID"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        data-plasmic-name={"boSelect"}
                        data-plasmic-override={overrides.boSelect}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.boSelect)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "boSelect",
                          "value"
                        ])}
                        options={(() => {
                          try {
                            return $queries.partners.data
                              .filter(item => item.isOrg === true)
                              .map(item => ({
                                label: item.name,
                                value: item.id
                              }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [
                                {
                                  value: "option1",
                                  label: "Option 1",
                                  type: "option"
                                },
                                {
                                  value: "option2",
                                  label: "Option 2",
                                  type: "option"
                                }
                              ];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["boSelect__popup"]}
                        value={generateStateValueProp($state, [
                          "boSelect",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                  </div>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___25VeP
                    )}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gD6H6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Description"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"description"}
                    rules={[{ ruleType: "required" }]}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ),
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__kzaQz
                    )}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f6Nhr
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Notes"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"user_notes"}
                  >
                    <textarea
                      data-plasmic-name={"bNotes"}
                      data-plasmic-override={overrides.bNotes}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.bNotes
                      )}
                      onChange={e => {
                        generateStateOnChangeProp($state, ["bNotes", "value"])(
                          e.target.value
                        );
                      }}
                      ref={ref => {
                        $refs["bNotes"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, ["bNotes", "value"]) ??
                        ""
                      }
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__u79Lv)}
                    disabled={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onClick={async () => {
                      const $steps = {};
                    }}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bfR
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </AntdAccordionItem>
          <AntdAccordionItem
            className={classNames("__wab_instance", sty.accordionItem___8Jef3)}
            id={"2"}
            label2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eq1KA
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"New Contact"}
                  </span>
                </React.Fragment>
              </div>
            }
            showArrow={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};
                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "4ACnaEgTThrwyGmam4pjE6",
                            opId: "72c0b4a7-ad16-4c59-b7e4-b11819e1f93e",
                            userArgs: {
                              variables: [$state.form.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pKs3E)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__seBzy
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ih6Ng
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Name"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"name"}
                      rules={[{ ruleType: "required" }]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input4", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___8Ef7E
                      )}
                      initialValue={false}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7NxR
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Organization"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"isOrg"}
                      noLabel={false}
                    >
                      <AntdSwitch
                        data-plasmic-name={"isOrg"}
                        data-plasmic-override={overrides.isOrg}
                        checked={generateStateValueProp($state, [
                          "isOrg",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.isOrg)}
                        onChange={generateStateOnChangeProp($state, [
                          "isOrg",
                          "checked"
                        ])}
                      />
                    </FormItemWrapper>
                  </div>
                  {(() => {
                    try {
                      return $state.form.value.isOrg;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eWiOs)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__umd6
                        )}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oaqzD
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Website"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"website"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input8),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input8", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input8",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input8.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input8"}
                              data-plasmic-override={overrides.input8}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__b5Xtr
                        )}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2JZWz
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Partnership Type:"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"PartnerType"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select"}
                          data-plasmic-override={overrides.select}
                          allowClear={true}
                          className={classNames("__wab_instance", sty.select)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select",
                            "value"
                          ])}
                          options={(() => {
                            const __composite = [
                              { value: null, label: null, type: "option" },
                              { type: null, value: null, label: null },
                              { type: "option", value: null, label: null }
                            ];

                            __composite["0"]["value"] = "Community Caterer";
                            __composite["0"]["label"] = "Community Caterer";
                            __composite["1"]["type"] = "option";
                            __composite["1"]["value"] = "Commercial Caterer";
                            __composite["1"]["label"] = "Commercial Caterer";
                            __composite["2"]["value"] = "none";
                            __composite["2"]["label"] = "None";
                            return __composite;
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select__popup"]}
                          value={generateStateValueProp($state, [
                            "select",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iDv0Y)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__rJiQn
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bdfQx
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Phone Number"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"phoneNumber"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField___9Sgj1
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yAbdH
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Email"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"email"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__s4DZd
                    )}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qavIv
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Notes for display:"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"display_notes"}
                  >
                    <textarea
                      data-plasmic-name={"textarea"}
                      data-plasmic-override={overrides.textarea}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea
                      )}
                      onChange={e => {
                        generateStateOnChangeProp($state, [
                          "textarea",
                          "value"
                        ])(e.target.value);
                      }}
                      ref={ref => {
                        $refs["textarea"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, ["textarea", "value"]) ??
                        ""
                      }
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__ue8Gs)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d3Qub
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </AntdAccordionItem>
          <AntdAccordionItem
            className={classNames("__wab_instance", sty.accordionItem__pomUw)}
            id={"3"}
            label2={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ysdNr
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"New Inventory"}
                  </span>
                </React.Fragment>
              </div>
            }
            showArrow={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form2),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form2", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],

                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};
                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "4ACnaEgTThrwyGmam4pjE6",
                            opId: "04202d2e-1789-4b92-9139-6b02c386d50b",
                            userArgs: {
                              variables: [$state.form2.value]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form2", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form2"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form2.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form2.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form2"}
                  data-plasmic-override={overrides.form2}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__v0GGu)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__a6Ib0
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n27Cr
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Memo"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"memo"}
                      rules={[{ ruleType: "required" }]}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.iMemo),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["iMemo", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "iMemo",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "iMemo.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"iMemo"}
                            data-plasmic-override={overrides.iMemo}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__q2D1K
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vecE
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Price"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"price"}
                    >
                      <AntdInputNumber
                        data-plasmic-name={"numberInput2"}
                        data-plasmic-override={overrides.numberInput2}
                        className={classNames(
                          "__wab_instance",
                          sty.numberInput2
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "numberInput2",
                          "value"
                        ])}
                        type={"number"}
                        value={generateStateValueProp($state, [
                          "numberInput2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__y5IxW
                      )}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hwVdS
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Quantity"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"qty"}
                      noLabel={false}
                    >
                      <AntdSwitch
                        data-plasmic-name={"switch2"}
                        data-plasmic-override={overrides.switch2}
                        checked={generateStateValueProp($state, [
                          "switch2",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty.switch2)}
                        onChange={generateStateOnChangeProp($state, [
                          "switch2",
                          "checked"
                        ])}
                      />
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f6HtA)}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"iCategory"}
                      data-plasmic-override={overrides.iCategory}
                      className={classNames("__wab_instance", sty.iCategory)}
                      initialValue={undefined}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vkGlO
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Category"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"category"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        data-plasmic-name={"iCat"}
                        data-plasmic-override={overrides.iCat}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.iCat)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "iCat",
                          "value"
                        ])}
                        options={(() => {
                          const __composite = [
                            { value: null, label: null, type: "option" },
                            { type: "option", value: null, label: null },
                            { value: null, label: null, type: "option" }
                          ];

                          __composite["0"]["value"] = "5|Snack";
                          __composite["0"]["label"] = "Snacks";
                          __composite["1"]["value"] = "6|Beverage";
                          __composite["1"]["label"] = "Beverage";
                          __composite["2"]["value"] = "7|Catering";
                          __composite["2"]["label"] = "Catering";
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["iCat__popup"]}
                        value={generateStateValueProp($state, [
                          "iCat",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                    {(() => {
                      try {
                        return $state.iCat.value === "Catering";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___9BtF
                        )}
                        initialValue={undefined}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dxE5T
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Partner"}
                              </span>
                            </React.Fragment>
                          </div>
                        }
                        name={"partnerID"}
                      >
                        <AntdSelect
                          data-plasmic-name={"select3"}
                          data-plasmic-override={overrides.select3}
                          className={classNames("__wab_instance", sty.select3)}
                          defaultStylesClassName={classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "select3",
                            "value"
                          ])}
                          options={(() => {
                            try {
                              return $queries.partners.data
                                .filter(item => item.PartnerType !== null)
                                .map(item => ({
                                  label: item.name,
                                  value: item.id
                                }));
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [{ type: "option" }];
                              }
                              throw e;
                            }
                          })()}
                          placeholder={"Select..."}
                          popupScopeClassName={sty["select3__popup"]}
                          value={generateStateValueProp($state, [
                            "select3",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                    ) : null}
                  </div>
                  {(() => {
                    try {
                      return $state.form2.value.category === "7|Catering";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__lVtl7
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__upz9I
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Partner"}
                            </span>
                          </React.Fragment>
                        </div>
                      }
                      name={"partnerID"}
                      rules={[]}
                    >
                      <AntdSelect
                        data-plasmic-name={"select2"}
                        data-plasmic-override={overrides.select2}
                        allowClear={true}
                        className={classNames("__wab_instance", sty.select2)}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens
                        )}
                        onChange={generateStateOnChangeProp($state, [
                          "select2",
                          "value"
                        ])}
                        options={(() => {
                          try {
                            return $queries.partners.data
                              .filter(
                                caterer =>
                                  caterer.PartnerType === "Community Caterer"
                              )
                              .map(caterer => ({
                                value: caterer.id,
                                label: caterer.name
                              }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select2__popup"]}
                        value={generateStateValueProp($state, [
                          "select2",
                          "value"
                        ])}
                      />
                    </FormItemWrapper>
                  ) : null}
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__fx1Kq
                    )}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kjzhk
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Notes"}
                          </span>
                        </React.Fragment>
                      </div>
                    }
                    name={"notes"}
                  >
                    <textarea
                      data-plasmic-name={"textarea2"}
                      data-plasmic-override={overrides.textarea2}
                      className={classNames(
                        projectcss.all,
                        projectcss.textarea,
                        sty.textarea2
                      )}
                      onChange={e => {
                        generateStateOnChangeProp($state, [
                          "textarea2",
                          "value"
                        ])(e.target.value);
                      }}
                      ref={ref => {
                        $refs["textarea2"] = ref;
                      }}
                      value={
                        generateStateValueProp($state, [
                          "textarea2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__uMh4J)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nelx
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </AntdAccordionItem>
        </React.Fragment>
      ),

      onChange: generateStateOnChangePropForCodeComponents(
        $state,
        "activePanelId",
        ["accordion", "activePanelId"],
        AntdAccordion_Helpers
      )
    };
    initializeCodeComponentStates(
      $state,
      [
        {
          name: "activePanelId",
          plasmicStateName: "accordion.activePanelId"
        }
      ],

      [],
      AntdAccordion_Helpers ?? {},
      child$Props
    );
    return (
      <AntdAccordion
        data-plasmic-name={"accordion"}
        data-plasmic-override={overrides.accordion}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        {...child$Props}
      />
    );
  })();
}

const PlasmicDescendants = {
  accordion: [
    "accordion",
    "form3",
    "contactId",
    "select4",
    "bcSelect",
    "boSelect",
    "input",
    "bNotes",
    "form",
    "input4",
    "isOrg",
    "input8",
    "select",
    "input5",
    "input6",
    "textarea",
    "form2",
    "iMemo",
    "numberInput2",
    "switch2",
    "iCategory",
    "iCat",
    "select3",
    "select2",
    "textarea2"
  ],

  form3: [
    "form3",
    "contactId",
    "select4",
    "bcSelect",
    "boSelect",
    "input",
    "bNotes"
  ],

  contactId: ["contactId", "select4", "bcSelect"],
  select4: ["select4", "bcSelect"],
  bcSelect: ["bcSelect"],
  boSelect: ["boSelect"],
  input: ["input"],
  bNotes: ["bNotes"],
  form: [
    "form",
    "input4",
    "isOrg",
    "input8",
    "select",
    "input5",
    "input6",
    "textarea"
  ],

  input4: ["input4"],
  isOrg: ["isOrg"],
  input8: ["input8"],
  select: ["select"],
  input5: ["input5"],
  input6: ["input6"],
  textarea: ["textarea"],
  form2: [
    "form2",
    "iMemo",
    "numberInput2",
    "switch2",
    "iCategory",
    "iCat",
    "select3",
    "select2",
    "textarea2"
  ],

  iMemo: ["iMemo"],
  numberInput2: ["numberInput2"],
  switch2: ["switch2"],
  iCategory: ["iCategory", "iCat"],
  iCat: ["iCat"],
  select3: ["select3"],
  select2: ["select2"],
  textarea2: ["textarea2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewRows2__ArgProps,
          internalVariantPropNames: PlasmicNewRows2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewRows2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "accordion") {
    func.displayName = "PlasmicNewRows2";
  } else {
    func.displayName = `PlasmicNewRows2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewRows2 = Object.assign(
  // Top-level PlasmicNewRows2 renders the root element
  makeNodeComponent("accordion"),
  {
    // Helper components rendering sub-elements
    form3: makeNodeComponent("form3"),
    contactId: makeNodeComponent("contactId"),
    select4: makeNodeComponent("select4"),
    bcSelect: makeNodeComponent("bcSelect"),
    boSelect: makeNodeComponent("boSelect"),
    input: makeNodeComponent("input"),
    bNotes: makeNodeComponent("bNotes"),
    form: makeNodeComponent("form"),
    input4: makeNodeComponent("input4"),
    isOrg: makeNodeComponent("isOrg"),
    input8: makeNodeComponent("input8"),
    select: makeNodeComponent("select"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    textarea: makeNodeComponent("textarea"),
    form2: makeNodeComponent("form2"),
    iMemo: makeNodeComponent("iMemo"),
    numberInput2: makeNodeComponent("numberInput2"),
    switch2: makeNodeComponent("switch2"),
    iCategory: makeNodeComponent("iCategory"),
    iCat: makeNodeComponent("iCat"),
    select3: makeNodeComponent("select3"),
    select2: makeNodeComponent("select2"),
    textarea2: makeNodeComponent("textarea2"),
    // Metadata about props expected for PlasmicNewRows2
    internalVariantProps: PlasmicNewRows2__VariantProps,
    internalArgProps: PlasmicNewRows2__ArgProps
  }
);

export default PlasmicNewRows2;
/* prettier-ignore-end */
