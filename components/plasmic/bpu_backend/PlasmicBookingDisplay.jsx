// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: immbM_V6pqdI
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicBookingDisplay.module.css"; // plasmic-import: immbM_V6pqdI/css

createPlasmicElementProxy;

export const PlasmicBookingDisplay__VariantProps = new Array();

export const PlasmicBookingDisplay__ArgProps = new Array(
  "booking",
  "organization",
  "contact"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingDisplay__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          organization: { name: "21kWorlds", website: "21kworlds.earth" }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.booking["public"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.booking.ballroom;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "0017dd0f-1c39-40c1-bc25-ad34ce6ad4e7",
        userArgs: {
          filters: [$props.booking.id]
        },
        cacheKey: `plasmic.$.0017dd0f-1c39-40c1-bc25-ad34ce6ad4e7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__omDf0)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1__ewa57
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.booking.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "You won't believe what happens next.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h1>
      </div>
      <h3
        className={classNames(
          projectcss.all,
          projectcss.h3,
          projectcss.__wab_text,
          sty.h3__szbSj
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.booking.description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "You won't believe what happens next.";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </h3>
      <div className={classNames(projectcss.all, sty.freeBox__ks8Fi)}>
        <h1
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1___0MdmI
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.organization[0].name ?? "Organization";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Organization";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h1>
        <h2
          data-plasmic-name={"h2"}
          data-plasmic-override={overrides.h2}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.h2
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.contact[0].name ?? "Contact";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Contact";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h2>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__fos6J)}>
        <h3
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3__ilTho
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.organization[0].website ?? "Website";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Website";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h3>
        <h4
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4__qo1GU
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.contact[0].email ?? "Email";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Email";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h4>
        <h4
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4__vv1Sa
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.contact[0].phoneNumber ?? "Phone";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Phone";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h4>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__x2S9C)}>
        <div className={classNames(projectcss.all, sty.freeBox__udHqG)}>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__xF8A
            )}
          >
            {"Event: "}
          </h5>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__zZFmZ
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return new Date($props.booking.date).toLocaleDateString(
                    "en-US",
                    { year: "2-digit", month: "2-digit", day: "2-digit" }
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "--/--/--";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h5>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__mQOt)}>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__fi0Vr
            )}
          >
            {"Start: "}
          </h5>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__wHnYv
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    const eventStart = $props.booking.event_start;
                    const [hours, minutes] = eventStart.split(":");
                    const period = hours >= 12 ? "PM" : "AM";
                    const displayHours = hours % 12 || 12;
                    return `${displayHours}:${minutes} ${period}`;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "--:-- --";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h5>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___5W2Oa)}>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5__zvSyo
            )}
          >
            {"End: "}
          </h5>
          <h5
            className={classNames(
              projectcss.all,
              projectcss.h5,
              projectcss.__wab_text,
              sty.h5___2ViVb
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return (() => {
                    const eventEnd = $props.booking.event_end;
                    const [hours, minutes] = eventEnd.split(":");
                    const period = hours >= 12 ? "PM" : "AM";
                    const displayHours = hours % 12 || 12;
                    return `${displayHours}:${minutes} ${period}`;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "--:-- --";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h5>
        </div>
        <AntdCheckbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          checked={generateStateValueProp($state, ["checkbox", "checked"])}
          className={classNames("__wab_instance", sty.checkbox)}
          defaultChecked={(() => {
            try {
              return $props.booking["public"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onChange={generateStateOnChangeProp($state, ["checkbox", "checked"])}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uAipa
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000", fontWeight: 700 }}
              >
                {"Public"}
              </span>
            </React.Fragment>
          </div>
        </AntdCheckbox>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__fcsDy)}>
        <div className={classNames(projectcss.all, sty.freeBox__mwMiz)}>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__nOcMu
            )}
          >
            {"Lodge In"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6___0CAi8
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.lodge_start ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__nWdoq
            )}
          >
            {"Lodge Out"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6___26Atj
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.lodge_end ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__z47Ln)}>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__r0T0U
            )}
          >
            {"Library In"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6___2Cu5D
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.library_start ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__d8T2T
            )}
          >
            {"Library Out"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__eGmKk
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.library_end ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___6YBOg)}>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__lZb9
            )}
          >
            {"Kitchen In"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__kFUcQ
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.kitchen_start ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "00:00:00";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__onWse
            )}
          >
            {"Kitchen Out"}
          </h6>
          <h6
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6__jzykJ
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.kitchen_end ?? "00:00:00";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "You won't believe what happens next.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h6>
        </div>
        <AntdCheckbox
          data-plasmic-name={"checkbox2"}
          data-plasmic-override={overrides.checkbox2}
          checked={generateStateValueProp($state, ["checkbox2", "checked"])}
          className={classNames("__wab_instance", sty.checkbox2)}
          defaultChecked={(() => {
            try {
              return $props.booking.ballroom;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onChange={generateStateOnChangeProp($state, ["checkbox2", "checked"])}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ks4CN
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#000000", fontWeight: 700 }}
              >
                {"Ballroom"}
              </span>
            </React.Fragment>
          </div>
        </AntdCheckbox>
      </div>
      {(() => {
        const child$Props = {
          bordered: true,
          className: classNames("__wab_instance", sty.collapse),
          defaultOpen: true,
          label2: (
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__ecrpf
              )}
            >
              {"Catering"}
            </h1>
          ),

          onChange: generateStateOnChangePropForCodeComponents(
            $state,
            "open",
            ["collapse", "open"],
            AntdSingleCollapse_Helpers
          ),
          open: generateStateValueProp($state, ["collapse", "open"]),
          showArrow: true
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "open",
              plasmicStateName: "collapse.open"
            }
          ],

          [],
          AntdSingleCollapse_Helpers ?? {},
          child$Props
        );
        return (
          <AntdSingleCollapse
            data-plasmic-name={"collapse"}
            data-plasmic-override={overrides.collapse}
            {...child$Props}
          >
            {"Collapsible text..."}
          </AntdSingleCollapse>
        );
      })()}
      {(() => {
        const child$Props = {
          bordered: true,
          className: classNames("__wab_instance", sty.collapse2),
          defaultOpen: true,
          label2: (
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__t17QI
              )}
            >
              {"Coffee"}
            </h1>
          ),

          onChange: generateStateOnChangePropForCodeComponents(
            $state,
            "open",
            ["collapse2", "open"],
            AntdSingleCollapse_Helpers
          ),
          open: generateStateValueProp($state, ["collapse2", "open"]),
          showArrow: true
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "open",
              plasmicStateName: "collapse2.open"
            }
          ],

          [],
          AntdSingleCollapse_Helpers ?? {},
          child$Props
        );
        return (
          <AntdSingleCollapse
            data-plasmic-name={"collapse2"}
            data-plasmic-override={overrides.collapse2}
            {...child$Props}
          >
            {"Collapsible text..."}
          </AntdSingleCollapse>
        );
      })()}
      <div className={classNames(projectcss.all, sty.freeBox__f6JgR)}>
        <div className={classNames(projectcss.all, sty.freeBox__nbXe)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__oD4BV
            )}
          >
            {"Staging"}
          </h3>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__raP38
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.staging;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Value";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h4>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___3OFEw)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__oVzzc
            )}
          >
            {"Lighting"}
          </h3>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__lUNxi
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.lighting ?? "None";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Value";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h4>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__asJob)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__tk084
            )}
          >
            {"Sound"}
          </h3>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__e8It
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.sound ?? "None";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Value";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h4>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__guqdu)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__kXq7F
            )}
          >
            {"Presentation"}
          </h3>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__ldyi2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.booking.presentation ?? "None";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Value";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h4>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__pwThj)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__k8Rn5
            )}
          >
            {"Tech Hrs"}
          </h3>
          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4___1Li7B
            )}
          >
            {"Value"}
          </h4>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__wqKcv)}>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__eh4M6
          )}
        >
          {"Client Notes:"}
        </h5>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__n02Zx
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.booking.client_notes;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Coffee";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___57ICm)}>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__wzYpa
          )}
        >
          {"Subsidy Amount: $"}
        </h5>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__lotl
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.booking.sub_amount.toFixed(2);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Client Notes:";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__qrVcU
          )}
        >
          {" | Reason: "}
        </h5>
        <h5
          className={classNames(
            projectcss.all,
            projectcss.h5,
            projectcss.__wab_text,
            sty.h5__fdrA
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.booking.sub_reason;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Client Notes:";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h5>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__cLSuN
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return (
                "https://bpu-backend.vercel.app/bookings-2/" +
                $props.booking.id +
                "/?name=" +
                $props.contact[0].name.split(" ")[0]
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h2", "checkbox", "checkbox2", "collapse", "collapse2"],
  h2: ["h2"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  collapse: ["collapse"],
  collapse2: ["collapse2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingDisplay__ArgProps,
          internalVariantPropNames: PlasmicBookingDisplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingDisplay";
  } else {
    func.displayName = `PlasmicBookingDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingDisplay = Object.assign(
  // Top-level PlasmicBookingDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    collapse: makeNodeComponent("collapse"),
    collapse2: makeNodeComponent("collapse2"),
    // Metadata about props expected for PlasmicBookingDisplay
    internalVariantProps: PlasmicBookingDisplay__VariantProps,
    internalArgProps: PlasmicBookingDisplay__ArgProps
  }
);

export default PlasmicBookingDisplay;
/* prettier-ignore-end */
