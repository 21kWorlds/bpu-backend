// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: immbM_V6pqdI
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  set as $stateSet,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicBookingDisplay.module.css"; // plasmic-import: immbM_V6pqdI/css

createPlasmicElementProxy;

export const PlasmicBookingDisplay__VariantProps = new Array("edit");

export const PlasmicBookingDisplay__ArgProps = new Array(
  "booking",
  "organization",
  "contact"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingDisplay__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          organization: { name: "21kWorlds", website: "21kworlds.earth" }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.booking["public"];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "checkbox2.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.booking.ballroom;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapse2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "edit",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.edit
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox3.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input15.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox4.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input16.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input17.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input18.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input19.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input22.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input24.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input26.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.booking.lighting;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "0017dd0f-1c39-40c1-bc25-ad34ce6ad4e7",
        userArgs: {
          filters: [$props.booking.id]
        },
        cacheKey: `plasmic.$.0017dd0f-1c39-40c1-bc25-ad34ce6ad4e7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootedit]: hasVariant($state, "edit", "edit") }
      )}
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form, {
            [sty.formedit]: hasVariant($state, "edit", "edit")
          }),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["form", "value"],
            FormWrapper_Helpers
          ),
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],

          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};
            $steps["defaultSubmit"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "4ACnaEgTThrwyGmam4pjE6",
                      opId: "f04af95e-7b5c-481a-bedd-675a07b57f34",
                      userArgs: {
                        keys: [$props.booking.id],
                        variables: [$state.form.value]
                      },
                      cacheKey: null,
                      invalidatedKeys: ["plasmic_refresh_all"],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["defaultSubmit"] != null &&
              typeof $steps["defaultSubmit"] === "object" &&
              typeof $steps["defaultSubmit"].then === "function"
            ) {
              $steps["defaultSubmit"] = await $steps["defaultSubmit"];
            }
          },
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["form", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],

          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__mGz8B)}
              hidden={true}
              initialValue={"Did it work?"}
              label={"status"}
              name={"status"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input22),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input22", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input22", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input22.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input22"}
                    data-plasmic-override={overrides.input22}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__ddcnQ)}
              hidden={true}
              initialValue={"e9f62405-c290-4b04-b3a4-663d5fd64cdc"}
              label={"contactID"}
              name={"contactID"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input3),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input3", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input3", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input3.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__reWDt)}
              hidden={true}
              initialValue={null}
              label={"eventID"}
              name={"eventID"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input5),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input5", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input5", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input5.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input5"}
                    data-plasmic-override={overrides.input5}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <div
              className={classNames(projectcss.all, sty.freeBox__m4Zw7, {
                [sty.freeBoxedit__m4Zw7JZQz]: hasVariant($state, "edit", "edit")
              })}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__ewa57
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.booking.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__om4C, {
                  [sty.formFieldedit__om4CjZQz]: hasVariant(
                    $state,
                    "edit",
                    "edit"
                  )
                })}
                initialValue={(() => {
                  try {
                    return $props.booking.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={"title"}
                name={"title"}
                noLabel={true}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input17),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input17", "value"],
                      AntdInput_Helpers
                    ),
                    value: generateStateValueProp($state, ["input17", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input17.value"
                      }
                    ],

                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdInput
                      data-plasmic-name={"input17"}
                      data-plasmic-override={overrides.input17}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__szbSj,
                  {
                    [sty.h3edit__szbSjjZQz]: hasVariant($state, "edit", "edit")
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.booking.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h3>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__hOqo, {
                  [sty.formFieldedit__hOqOjZQz]: hasVariant(
                    $state,
                    "edit",
                    "edit"
                  )
                })}
                hidden={false}
                initialValue={(() => {
                  try {
                    return $props.booking.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                label={"description"}
                name={"description"}
                noLabel={true}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.input16),
                    onChange: generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["input16", "value"],
                      AntdInput_Helpers
                    ),
                    value: generateStateValueProp($state, ["input16", "value"])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "input16.value"
                      }
                    ],

                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <AntdInput
                      data-plasmic-name={"input16"}
                      data-plasmic-override={overrides.input16}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <div className={classNames(projectcss.all, sty.freeBox__ks8Fi)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___0MdmI
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.organization[0].name ?? "Organization";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Organization";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
                <div className={classNames(projectcss.all, sty.freeBox__vPUsQ)}>
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2,
                      { [sty.h2edit]: hasVariant($state, "edit", "edit") }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.contact[0].name ?? "Contact";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Contact";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h2>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fos6J)}>
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__ilTho
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.organization[0].website ?? "Website";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Website";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h3>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__qo1GU
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.contact[0].email ?? "Email";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Email";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h4>
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__vv1Sa
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.contact[0].phoneNumber ?? "Phone";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Phone";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h4>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__x2S9C)}>
                <div className={classNames(projectcss.all, sty.freeBox__udHqG)}>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__xF8A
                    )}
                  >
                    {"Event: "}
                  </h5>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__jgvHu,
                      {
                        [sty.formFieldedit__jgvHUjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.date;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"date"}
                    name={"date"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames("__wab_instance", sty.input4),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input4", "value"],
                          AntdInput_Helpers
                        ),
                        type: "date",
                        value: generateStateValueProp($state, [
                          "input4",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input4.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input4"}
                          data-plasmic-override={overrides.input4}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__zZFmZ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return new Date(
                            $props.booking.date
                          ).toLocaleDateString("en-US", {
                            year: "2-digit",
                            month: "2-digit",
                            day: "2-digit"
                          });
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--/--/--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mQOt)}>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__fi0Vr
                    )}
                  >
                    {"Start: "}
                  </h5>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__l9D1M,
                      {
                        [sty.formFieldedit__l9D1MjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $state.form.value.event_start;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"event_start"}
                    name={"event_start"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input14),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input14", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input14",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input14.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input14"}
                          data-plasmic-override={overrides.input14}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__wHnYv
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const eventStart = $props.booking.event_start;
                            const [hours, minutes] = eventStart.split(":");
                            const period = hours >= 12 ? "PM" : "AM";
                            const displayHours = hours % 12 || 12;
                            return `${displayHours}:${minutes} ${period}`;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--:-- --";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h5>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___5W2Oa)}
                >
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__zvSyo
                    )}
                  >
                    {"End: "}
                  </h5>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__uxUt4,
                      {
                        [sty.formFieldedit__uxUt4JZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $state.form.value.event_end;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"event_end"}
                    name={"event_end"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input15),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input15", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input15",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input15.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input15"}
                          data-plasmic-override={overrides.input15}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___2ViVb
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const eventEnd = $props.booking.event_end;
                            const [hours, minutes] = eventEnd.split(":");
                            const period = hours >= 12 ? "PM" : "AM";
                            const displayHours = hours % 12 || 12;
                            return `${displayHours}:${minutes} ${period}`;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--:-- --";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h5>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mtZva)}>
                  <AntdCheckbox
                    data-plasmic-name={"checkbox"}
                    data-plasmic-override={overrides.checkbox}
                    checked={generateStateValueProp($state, [
                      "checkbox",
                      "checked"
                    ])}
                    className={classNames("__wab_instance", sty.checkbox)}
                    defaultChecked={(() => {
                      try {
                        return $props.booking["public"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={generateStateOnChangeProp($state, [
                      "checkbox",
                      "checked"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uAipa
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 700 }}
                        >
                          {"Public"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdCheckbox>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__gb8Xj,
                      {
                        [sty.formFieldedit__gb8XjjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking["public"];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__z9IHg
                        )}
                      >
                        {"Label"}
                      </div>
                    }
                    name={"public"}
                    noLabel={true}
                  >
                    <AntdCheckbox
                      data-plasmic-name={"checkbox3"}
                      data-plasmic-override={overrides.checkbox3}
                      checked={generateStateValueProp($state, [
                        "checkbox3",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.checkbox3)}
                      onChange={generateStateOnChangeProp($state, [
                        "checkbox3",
                        "checked"
                      ])}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___40XqS
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"public"}
                          </span>
                        </React.Fragment>
                      </div>
                    </AntdCheckbox>
                  </FormItemWrapper>
                </div>
              </div>
              <FormItemWrapper
                className={classNames("__wab_instance", sty.formField__kfxxG)}
                initialValue={
                  "So the initial value for each datapoint comes from a Supabase database. You can edit them, but they won't be saved back to that database until you click submit. This database can be put under a bpu controlled account. I can then create test data, and give myself permission to work with that data in designing the website interface. Then all data from that point forward will only be yours. "
                }
                label={
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__jMfSt
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Notes"}
                      </span>
                    </React.Fragment>
                  </h5>
                }
                name={"user_notes"}
              >
                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(
                    projectcss.all,
                    projectcss.textarea,
                    sty.textarea
                  )}
                  onChange={e => {
                    generateStateOnChangeProp($state, ["textarea", "value"])(
                      e.target.value
                    );
                  }}
                  ref={ref => {
                    $refs["textarea"] = ref;
                  }}
                  value={
                    generateStateValueProp($state, ["textarea", "value"]) ?? ""
                  }
                />
              </FormItemWrapper>
              <div className={classNames(projectcss.all, sty.freeBox__fcsDy)}>
                <div className={classNames(projectcss.all, sty.freeBox__mwMiz)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__nOcMu
                    )}
                  >
                    {"Lodge In"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__tWfBs,
                      {
                        [sty.formFieldedit__tWfBsjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.lodge_start;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"lodge_start"}
                    name={"lodge_start"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input6),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input6", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input6",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input6.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input6"}
                          data-plasmic-override={overrides.input6}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6___0CAi8
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.lodge_start ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__nWdoq
                    )}
                  >
                    {"Lodge Out"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___6Qh3F,
                      {
                        [sty.formFieldedit___6Qh3FjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.lodge_end;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"lodge_end"}
                    name={"lodge_end"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input9),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input9", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input9",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input9.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input9"}
                          data-plasmic-override={overrides.input9}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6___26Atj
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.lodge_end ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__z47Ln)}>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__r0T0U
                    )}
                  >
                    {"Library In"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__uuN41,
                      {
                        [sty.formFieldedit__uuN41JZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.library_start;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"library_start"}
                    name={"library_start"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input7),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input7", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input7",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input7.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input7"}
                          data-plasmic-override={overrides.input7}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6___2Cu5D
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.library_start ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__d8T2T
                    )}
                  >
                    {"Library Out"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__cFejj,
                      {
                        [sty.formFieldedit__cFejjjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.library_end;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"library_end"}
                    name={"library_end"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input10),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input10", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input10",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input10.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input10"}
                          data-plasmic-override={overrides.input10}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__eGmKk
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.library_end ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___6YBOg)}
                >
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__lZb9
                    )}
                  >
                    {"Kitchen In"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__ehSee,
                      {
                        [sty.formFieldedit__ehSeejZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.kitchen_start;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"kitchen_start"}
                    name={"kitchen_start"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input8),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input8", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input8",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input8.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input8"}
                          data-plasmic-override={overrides.input8}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__kFUcQ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.kitchen_start ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "00:00:00";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__onWse
                    )}
                  >
                    {"Kitchen Out"}
                  </h6>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__tV15A,
                      {
                        [sty.formFieldedit__tV15AjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.kitchen_end;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"kitchen_end"}
                    name={"kitchen_end"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input11),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input11", "value"],
                          AntdInput_Helpers
                        ),
                        type: "time",
                        value: generateStateValueProp($state, [
                          "input11",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input11.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input11"}
                          data-plasmic-override={overrides.input11}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__jzykJ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.kitchen_end ?? "00:00:00";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "You won't believe what happens next.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h6>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__lmq4I)}>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__yvFz,
                      {
                        [sty.formFieldedit__yvFzJZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.ballroom;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return null;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iUWiq
                        )}
                      >
                        {"Label"}
                      </div>
                    }
                    name={"ballroom"}
                    noLabel={true}
                  >
                    <AntdCheckbox
                      data-plasmic-name={"checkbox4"}
                      data-plasmic-override={overrides.checkbox4}
                      checked={generateStateValueProp($state, [
                        "checkbox4",
                        "checked"
                      ])}
                      className={classNames("__wab_instance", sty.checkbox4)}
                      onChange={generateStateOnChangeProp($state, [
                        "checkbox4",
                        "checked"
                      ])}
                    >
                      {"ballroom"}
                    </AntdCheckbox>
                  </FormItemWrapper>
                  <AntdCheckbox
                    data-plasmic-name={"checkbox2"}
                    data-plasmic-override={overrides.checkbox2}
                    checked={generateStateValueProp($state, [
                      "checkbox2",
                      "checked"
                    ])}
                    className={classNames("__wab_instance", sty.checkbox2)}
                    defaultChecked={(() => {
                      try {
                        return $props.booking.ballroom;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={generateStateOnChangeProp($state, [
                      "checkbox2",
                      "checked"
                    ])}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ks4CN
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000", fontWeight: 700 }}
                        >
                          {"Ballroom"}
                        </span>
                      </React.Fragment>
                    </div>
                  </AntdCheckbox>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bGsaE)}>
                <div className={classNames(projectcss.all, sty.freeBox__dvlBr)}>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5__cLSuN
                    )}
                  >
                    {"Inquiry: "}
                  </h5>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__dmav5
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return (
                          "https://bpu-backend.vercel.app/bookings-2/" +
                          $props.booking.id
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "https://bpu-backend.vercel.app/bookings-2/" +
                            $props.booking.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Some link text";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </PlasmicLink__>
                  <h5
                    className={classNames(
                      projectcss.all,
                      projectcss.h5,
                      projectcss.__wab_text,
                      sty.h5___8M4Hv
                    )}
                  >
                    {"Catering: "}
                  </h5>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xQx0L
                    )}
                    component={Link}
                    href={(() => {
                      try {
                        return (
                          "https://bpu-backend.vercel.app/new-page/" +
                          $props.booking.id
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            "https://bpu-backend.vercel.app/new-page/" +
                            $props.booking.id
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Some link text";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </PlasmicLink__>
                </div>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__iIrBm, {
                    [sty.buttonedit__iIrBMjZQz]: hasVariant(
                      $state,
                      "edit",
                      "edit"
                    )
                  })}
                  disabled={true}
                  onClick={async () => {
                    const $steps = {};
                    $steps["postgresUpdateById"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "4ACnaEgTThrwyGmam4pjE6",
                              opId: "f04af95e-7b5c-481a-bedd-675a07b57f34",
                              userArgs: {
                                keys: [$props.booking.id],
                                variables: [$queries.query.data[0]]
                              },
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["postgresUpdateById"] != null &&
                      typeof $steps["postgresUpdateById"] === "object" &&
                      typeof $steps["postgresUpdateById"].then === "function"
                    ) {
                      $steps["postgresUpdateById"] = await $steps[
                        "postgresUpdateById"
                      ];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hqlOh
                    )}
                  >
                    {"Sync Inquiry"}
                  </div>
                </AntdButton>
              </div>
              {(() => {
                const child$Props = {
                  bordered: true,
                  className: classNames("__wab_instance", sty.collapse),
                  defaultOpen: true,
                  label2: (
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__ecrpf,
                        {
                          [sty.h1edit__ecrpfjZQz]: hasVariant(
                            $state,
                            "edit",
                            "edit"
                          )
                        }
                      )}
                    >
                      {"Catering"}
                    </h1>
                  ),

                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "open",
                    ["collapse", "open"],
                    AntdSingleCollapse_Helpers
                  ),
                  open: generateStateValueProp($state, ["collapse", "open"]),
                  showArrow: true
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "open",
                      plasmicStateName: "collapse.open"
                    }
                  ],

                  [],
                  AntdSingleCollapse_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdSingleCollapse
                    data-plasmic-name={"collapse"}
                    data-plasmic-override={overrides.collapse}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__qclv3
                      )}
                      initialValue={"Community"}
                      label={"catering_pref"}
                      name={"catering_pref"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input18),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input18", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input18",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input18.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input18"}
                            data-plasmic-override={overrides.input18}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </AntdSingleCollapse>
                );
              })()}
              {(() => {
                const child$Props = {
                  bordered: true,
                  className: classNames("__wab_instance", sty.collapse2),
                  defaultOpen: true,
                  label2: (
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__t17QI
                      )}
                    >
                      {"Coffee"}
                    </h1>
                  ),

                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "open",
                    ["collapse2", "open"],
                    AntdSingleCollapse_Helpers
                  ),
                  open: generateStateValueProp($state, ["collapse2", "open"]),
                  showArrow: true
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "open",
                      plasmicStateName: "collapse2.open"
                    }
                  ],

                  [],
                  AntdSingleCollapse_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdSingleCollapse
                    data-plasmic-name={"collapse2"}
                    data-plasmic-override={overrides.collapse2}
                    {...child$Props}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__peLbg)}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__uYs0W
                        )}
                        initialValue={null}
                        label={"coffee_pref"}
                        name={"coffee_pref"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.input19
                            ),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input19", "value"],
                                AntdInput_Helpers
                              ),
                            value: generateStateValueProp($state, [
                              "input19",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input19.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input19"}
                              data-plasmic-override={overrides.input19}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rZsY4
                        )}
                        initialValue={null}
                        label={"carafe_no"}
                        name={"carafe_no"}
                      >
                        <AntdInputNumber
                          data-plasmic-name={"numberInput"}
                          data-plasmic-override={overrides.numberInput}
                          className={classNames(
                            "__wab_instance",
                            sty.numberInput
                          )}
                          onChange={generateStateOnChangeProp($state, [
                            "numberInput",
                            "value"
                          ])}
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "numberInput",
                            "value"
                          ])}
                        />
                      </FormItemWrapper>
                    </div>
                  </AntdSingleCollapse>
                );
              })()}
              <div
                className={classNames(projectcss.all, sty.freeBox__f6JgR, {
                  [sty.freeBoxedit__f6JgRjZQz]: hasVariant(
                    $state,
                    "edit",
                    "edit"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nbXe)}>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__oD4BV
                    )}
                  >
                    {"Staging"}
                  </h3>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__s6T3O,
                      {
                        [sty.formFieldedit__s6T3OjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.staging;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"staging"}
                    name={"staging"}
                    noLabel={true}
                  >
                    <AntdSelect
                      data-plasmic-name={"select4"}
                      data-plasmic-override={overrides.select4}
                      className={classNames("__wab_instance", sty.select4)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={generateStateOnChangeProp($state, [
                        "select4",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" },
                          { type: "option", value: null, label: null }
                        ];

                        __composite["0"]["value"] = "two of one";
                        __composite["0"]["label"] = "(2) of 1";
                        __composite["1"]["value"] = "four of two";
                        __composite["1"]["label"] = "(4) of 2";
                        __composite["2"]["value"] = "all eight";
                        __composite["2"]["label"] = "All (8)";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select4__popup"]}
                      value={generateStateValueProp($state, [
                        "select4",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__raP38
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.staging ?? "None";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Value";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___3OFEw)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__oVzzc
                    )}
                  >
                    {"Lighting"}
                  </h3>
                  <AntdSelect
                    data-plasmic-name={"select3"}
                    data-plasmic-override={overrides.select3}
                    className={classNames("__wab_instance", sty.select3, {
                      [sty.select3edit]: hasVariant($state, "edit", "edit")
                    })}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    defaultValue={(() => {
                      try {
                        return $props.booking.lighting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={generateStateOnChangeProp($state, [
                      "select3",
                      "value"
                    ])}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null, type: "option" },
                        { value: null, label: null, type: "option" }
                      ];

                      __composite["0"]["value"] = "Small";
                      __composite["0"]["label"] = "Small";
                      __composite["1"]["value"] = "Large";
                      __composite["1"]["label"] = "Large";
                      return __composite;
                    })()}
                    placeholder={"Select..."}
                    popupScopeClassName={sty["select3__popup"]}
                    value={generateStateValueProp($state, ["select3", "value"])}
                  />

                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__lUNxi
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.lighting ?? "None";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Value";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__asJob)}>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__tk084
                    )}
                  >
                    {"Sound"}
                  </h3>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__a6PBr,
                      {
                        [sty.formFieldedit__a6PBrjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.sound;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"sound"}
                    name={"sound"}
                    noLabel={true}
                  >
                    <AntdSelect
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={generateStateOnChangeProp($state, [
                        "select2",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" },
                          { type: "option", value: null, label: null }
                        ];

                        __composite["0"]["value"] = "Small";
                        __composite["0"]["label"] = "Small";
                        __composite["1"]["value"] = "Medium";
                        __composite["1"]["label"] = "Medium";
                        __composite["2"]["value"] = "Large";
                        __composite["2"]["label"] = "Large";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select2__popup"]}
                      value={generateStateValueProp($state, [
                        "select2",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__e8It
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.sound ?? "None";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Value";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__guqdu)}>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__kXq7F
                    )}
                  >
                    {"Presentation"}
                  </h3>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__fwT8M,
                      {
                        [sty.formFieldedit__fwT8MjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.presentation;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={"presentation"}
                    name={"presentation"}
                    noLabel={true}
                  >
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select, {
                        [sty.selectedit]: hasVariant($state, "edit", "edit")
                      })}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      onChange={generateStateOnChangeProp($state, [
                        "select",
                        "value"
                      ])}
                      options={(() => {
                        const __composite = [
                          { value: null, label: null, type: "option" },
                          { value: null, label: null, type: "option" }
                        ];

                        __composite["0"]["value"] = "Projector";
                        __composite["0"]["label"] = "Projector";
                        __composite["1"]["value"] = "SmartBoard";
                        __composite["1"]["label"] = "SmartBoard";
                        return __composite;
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  </FormItemWrapper>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__ldyi2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.booking.presentation ?? "None";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Value";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h4>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pwThj)}>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__k8Rn5,
                      {
                        [sty.h3edit__k8Rn5JZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                  >
                    {"Tech Hrs"}
                  </h3>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__r4SUj,
                      {
                        [sty.formFieldedit__r4SUjjZQz]: hasVariant(
                          $state,
                          "edit",
                          "edit"
                        )
                      }
                    )}
                    initialValue={(() => {
                      try {
                        return $props.booking.tech_hrs;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mQvEs
                        )}
                      >
                        {"Label"}
                      </div>
                    }
                    name={"tech_hrs"}
                    noLabel={true}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ),
                        type: "number",
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___1Li7B
                    )}
                  >
                    {"Value"}
                  </h4>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wqKcv)}>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__eh4M6
                  )}
                >
                  {"Client Notes:"}
                </h5>
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField__j1KFb,
                    {
                      [sty.formFieldedit__j1KFbjZQz]: hasVariant(
                        $state,
                        "edit",
                        "edit"
                      )
                    }
                  )}
                  initialValue={(() => {
                    try {
                      return $props.booking.client_notes;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={"client_notes"}
                  name={"client_notes"}
                  noLabel={true}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input24),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input24", "value"],
                        AntdInput_Helpers
                      ),
                      value: generateStateValueProp($state, [
                        "input24",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input24.value"
                        }
                      ],

                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdInput
                        data-plasmic-name={"input24"}
                        data-plasmic-override={overrides.input24}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__n02Zx
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.booking.client_notes;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Coffee";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___57ICm)}>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__lotl,
                    {
                      [sty.h5edit__lotljZQz]: hasVariant($state, "edit", "edit")
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          "Subsidy Amount: $" +
                          $props.booking.sub_amount.toFixed(2)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Client Notes:";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
                <FormItemWrapper
                  className={classNames("__wab_instance", sty.formField__fiJV, {
                    [sty.formFieldedit__fiJVjZQz]: hasVariant(
                      $state,
                      "edit",
                      "edit"
                    )
                  })}
                  initialValue={(() => {
                    try {
                      return $props.booking.sub_amount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 0;
                      }
                      throw e;
                    }
                  })()}
                  label={"sub_amount"}
                  name={"sub_amount"}
                  noLabel={true}
                >
                  <AntdInputNumber
                    data-plasmic-name={"numberInput2"}
                    data-plasmic-override={overrides.numberInput2}
                    className={classNames("__wab_instance", sty.numberInput2)}
                    onChange={generateStateOnChangeProp($state, [
                      "numberInput2",
                      "value"
                    ])}
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "numberInput2",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <h5
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5__fdrA,
                    {
                      [sty.h5edit__fdrAJZQz]: hasVariant($state, "edit", "edit")
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Reason: " + $props.booking.sub_reason;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Client Notes:";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h5>
                <FormItemWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.formField__mg55S,
                    {
                      [sty.formFieldedit__mg55SjZQz]: hasVariant(
                        $state,
                        "edit",
                        "edit"
                      )
                    }
                  )}
                  initialValue={(() => {
                    try {
                      return $props.booking.sub_reason;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  label={"sub_reason"}
                  name={"sub_reason"}
                  noLabel={true}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.input26),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["input26", "value"],
                        AntdInput_Helpers
                      ),
                      value: generateStateValueProp($state, [
                        "input26",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "input26.value"
                        }
                      ],

                      [],
                      AntdInput_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdInput
                        data-plasmic-name={"input26"}
                        data-plasmic-override={overrides.input26}
                        {...child$Props}
                      />
                    );
                  })()}
                </FormItemWrapper>
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__vaJm, {
                [sty.freeBoxedit__vaJmjZQz]: hasVariant($state, "edit", "edit")
              })}
            >
              <AntdButton
                className={classNames("__wab_instance", sty.button__wsj, {
                  [sty.buttonedit__wsjJZQz]: hasVariant($state, "edit", "edit")
                })}
                onClick={async () => {
                  const $steps = {};
                  $steps["updateEdit"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "edit",
                          operation: 2,
                          value: "edit"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEdit"] != null &&
                    typeof $steps["updateEdit"] === "object" &&
                    typeof $steps["updateEdit"].then === "function"
                  ) {
                    $steps["updateEdit"] = await $steps["updateEdit"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zo8Qc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.edit === "edit" ? "Cancel" : "Edit";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Cancel";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button___0XAyn, {
                  [sty.buttonedit___0XAyNjZQz]: hasVariant(
                    $state,
                    "edit",
                    "edit"
                  )
                })}
                onClick={async () => {
                  const $steps = {};
                  $steps["updateEdit"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "edit",
                          operation: 2,
                          value: "edit"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }
                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateEdit"] != null &&
                    typeof $steps["updateEdit"] === "object" &&
                    typeof $steps["updateEdit"].then === "function"
                  ) {
                    $steps["updateEdit"] = await $steps["updateEdit"];
                  }
                  $steps["refreshData"] =
                    $state.edit === "edit"
                      ? (() => {
                          const actionArgs = {
                            queryInvalidation: ["plasmic_refresh_all"]
                          };
                          return (async ({ queryInvalidation }) => {
                            if (!queryInvalidation) {
                              return;
                            }
                            await plasmicInvalidate(queryInvalidation);
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["refreshData"] != null &&
                    typeof $steps["refreshData"] === "object" &&
                    typeof $steps["refreshData"].then === "function"
                  ) {
                    $steps["refreshData"] = await $steps["refreshData"];
                  }
                }}
                submitsForm={
                  hasVariant($state, "edit", "edit")
                    ? (() => {
                        try {
                          return $state.edit === "edit";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                    : true
                }
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zyKi,
                    {
                      [sty.textedit__zyKijZQz]: hasVariant(
                        $state,
                        "edit",
                        "edit"
                      )
                    }
                  )}
                >
                  {hasVariant($state, "edit", "edit") ? "Submit" : "Update\n"}
                </div>
              </AntdButton>
            </div>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__ynnMk)}
              hidden={true}
              initialValue={"473dc40c-8aac-4795-a0aa-d40cb02fd4e7"}
              label={"CatererID"}
              name={"CatererID"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input13),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input13", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input13", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input13.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input13"}
                    data-plasmic-override={overrides.input13}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField___8OqB5)}
              hidden={true}
              initialValue={"4a70a30d-27a7-407b-9742-c1393ad6e326"}
              label={"OrgID"}
              name={"OrgID"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input12),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input12", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input12", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input12.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );
                return (
                  <AntdInput
                    data-plasmic-name={"input12"}
                    data-plasmic-override={overrides.input12}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
          </FormWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "form",
    "input22",
    "input3",
    "input5",
    "input17",
    "input16",
    "h2",
    "input4",
    "input14",
    "input15",
    "checkbox",
    "checkbox3",
    "textarea",
    "input6",
    "input9",
    "input7",
    "input10",
    "input8",
    "input11",
    "checkbox4",
    "checkbox2",
    "collapse",
    "input18",
    "collapse2",
    "input19",
    "numberInput",
    "select4",
    "select3",
    "select2",
    "select",
    "input",
    "input24",
    "numberInput2",
    "input26",
    "input13",
    "input12"
  ],

  form: [
    "form",
    "input22",
    "input3",
    "input5",
    "input17",
    "input16",
    "h2",
    "input4",
    "input14",
    "input15",
    "checkbox",
    "checkbox3",
    "textarea",
    "input6",
    "input9",
    "input7",
    "input10",
    "input8",
    "input11",
    "checkbox4",
    "checkbox2",
    "collapse",
    "input18",
    "collapse2",
    "input19",
    "numberInput",
    "select4",
    "select3",
    "select2",
    "select",
    "input",
    "input24",
    "numberInput2",
    "input26",
    "input13",
    "input12"
  ],

  input22: ["input22"],
  input3: ["input3"],
  input5: ["input5"],
  input17: ["input17"],
  input16: ["input16"],
  h2: ["h2"],
  input4: ["input4"],
  input14: ["input14"],
  input15: ["input15"],
  checkbox: ["checkbox"],
  checkbox3: ["checkbox3"],
  textarea: ["textarea"],
  input6: ["input6"],
  input9: ["input9"],
  input7: ["input7"],
  input10: ["input10"],
  input8: ["input8"],
  input11: ["input11"],
  checkbox4: ["checkbox4"],
  checkbox2: ["checkbox2"],
  collapse: ["collapse", "input18"],
  input18: ["input18"],
  collapse2: ["collapse2", "input19", "numberInput"],
  input19: ["input19"],
  numberInput: ["numberInput"],
  select4: ["select4"],
  select3: ["select3"],
  select2: ["select2"],
  select: ["select"],
  input: ["input"],
  input24: ["input24"],
  numberInput2: ["numberInput2"],
  input26: ["input26"],
  input13: ["input13"],
  input12: ["input12"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingDisplay__ArgProps,
          internalVariantPropNames: PlasmicBookingDisplay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingDisplay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingDisplay";
  } else {
    func.displayName = `PlasmicBookingDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingDisplay = Object.assign(
  // Top-level PlasmicBookingDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input22: makeNodeComponent("input22"),
    input3: makeNodeComponent("input3"),
    input5: makeNodeComponent("input5"),
    input17: makeNodeComponent("input17"),
    input16: makeNodeComponent("input16"),
    h2: makeNodeComponent("h2"),
    input4: makeNodeComponent("input4"),
    input14: makeNodeComponent("input14"),
    input15: makeNodeComponent("input15"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox3: makeNodeComponent("checkbox3"),
    textarea: makeNodeComponent("textarea"),
    input6: makeNodeComponent("input6"),
    input9: makeNodeComponent("input9"),
    input7: makeNodeComponent("input7"),
    input10: makeNodeComponent("input10"),
    input8: makeNodeComponent("input8"),
    input11: makeNodeComponent("input11"),
    checkbox4: makeNodeComponent("checkbox4"),
    checkbox2: makeNodeComponent("checkbox2"),
    collapse: makeNodeComponent("collapse"),
    input18: makeNodeComponent("input18"),
    collapse2: makeNodeComponent("collapse2"),
    input19: makeNodeComponent("input19"),
    numberInput: makeNodeComponent("numberInput"),
    select4: makeNodeComponent("select4"),
    select3: makeNodeComponent("select3"),
    select2: makeNodeComponent("select2"),
    select: makeNodeComponent("select"),
    input: makeNodeComponent("input"),
    input24: makeNodeComponent("input24"),
    numberInput2: makeNodeComponent("numberInput2"),
    input26: makeNodeComponent("input26"),
    input13: makeNodeComponent("input13"),
    input12: makeNodeComponent("input12"),
    // Metadata about props expected for PlasmicBookingDisplay
    internalVariantProps: PlasmicBookingDisplay__VariantProps,
    internalArgProps: PlasmicBookingDisplay__ArgProps
  }
);

export default PlasmicBookingDisplay;
/* prettier-ignore-end */
