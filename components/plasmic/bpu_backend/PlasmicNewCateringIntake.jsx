// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: ad0F70G0qfxW
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicNewCateringIntake.module.css"; // plasmic-import: ad0F70G0qfxW/css

createPlasmicElementProxy;

export const PlasmicNewCateringIntake__VariantProps = new Array();

export const PlasmicNewCateringIntake__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewCateringIntake__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "tabs[].activeKey",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroup[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroup2[][].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioGroup3[][].value",
        type: "private",
        variableType: "text"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "951935c7-8d2c-4190-aa4a-85a1ea10bb70",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.951935c7-8d2c-4190-aa4a-85a1ea10bb70.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "892f685e-7c5a-43dd-97c6-309abdc3aa28",
        userArgs: {
          filters: ["Community Caterer"]
        },
        cacheKey: `plasmic.$.892f685e-7c5a-43dd-97c6-309abdc3aa28.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query3: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "6c2ad424-66dd-49b0-8011-bc8075a0f720",
        userArgs: {},
        cacheKey: `plasmic.$.6c2ad424-66dd-49b0-8011-bc8075a0f720.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query4: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "853ca391-b507-4e25-90a5-4d260b22b2e1",
        userArgs: {},
        cacheKey: `plasmic.$.853ca391-b507-4e25-90a5-4d260b22b2e1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.query2.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kiG0B)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hQbU6)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Eat with KB Catering";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h1>
                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.display_notes;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Eat with KB offers a blend of extensive culinary experience and a focus on wholesome foods right here in Seattle. KB prepares each meal with an emphasis on nutrition and flavor, providing breakfast, lunch, and dinner options that cater to diverse tastes. With a commitment to using fresh and local ingredients, KB's dishes are both fulfilling and health-conscious. Step into KB\u2019s kitchen for a meal that feels both familiar and thoughtfully prepared.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h4>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zg0Mv)}
                  >
                    {(() => {
                      const child$Props = {
                        activeKey: generateStateValueProp($state, [
                          "tabs",
                          __plasmic_idx_0,
                          "activeKey"
                        ]),
                        animateTabBar: true,
                        animateTabContent: false,
                        animated: true,
                        className: classNames("__wab_instance", sty.tabs),
                        items: (
                          <React.Fragment>
                            <AntdTabItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabItem__jt1Ya
                              )}
                              key={"1"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__kMt3Y
                                  )}
                                >
                                  {"Breakfast"}
                                </div>
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__prEg
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.query4.data.filter(
                                        item =>
                                          item.partnerid === currentItem.id &&
                                          item.category === "breakfast"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vWboO
                                      )}
                                      key={currentIndex}
                                    >
                                      <h6
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h6,
                                          projectcss.__wab_text,
                                          sty.h6__bkG0W
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.description;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Pastry Platters (Bagels, muffins, donuts croissants), Yogurt cups w fresh fruit & granola, Bacon / Sausage, Eggs, orange juice & apple juice.";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h6>
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.radioGroup
                                          ),
                                          onChange: generateStateOnChangeProp(
                                            $state,
                                            [
                                              "radioGroup",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          ),
                                          optionType: "button",
                                          options: (() => {
                                            const __composite = [
                                              { value: null, label: null },
                                              { value: null, label: null },
                                              { value: null, label: null }
                                            ];

                                            __composite["0"]["value"] =
                                              currentItem.low_price;
                                            __composite["0"]["label"] =
                                              "Serves 15 | $" +
                                              currentItem.low_price.toFixed(2);
                                            __composite["1"]["value"] =
                                              currentItem.medium_price;
                                            __composite["1"]["label"] =
                                              "30 | $" +
                                              currentItem.medium_price.toFixed(
                                                2
                                              );
                                            __composite["2"]["value"] =
                                              currentItem.high_price;
                                            __composite["2"]["label"] =
                                              "60 | $" +
                                              currentItem.high_price.toFixed(2);
                                            return __composite;
                                          })(),
                                          value: generateStateValueProp(
                                            $state,
                                            [
                                              "radioGroup",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "radioGroup[][].value"
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1],
                                          undefined ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "radioGroup[][].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <AntdRadioGroup
                                            data-plasmic-name={"radioGroup"}
                                            data-plasmic-override={
                                              overrides.radioGroup
                                            }
                                            {...child$Props}
                                          >
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio__pqK
                                              )}
                                              value={"op1"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__hjDAr
                                                )}
                                              >
                                                {"Option 1"}
                                              </div>
                                            </AntdRadio>
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio___4MGpq
                                              )}
                                              value={"op2"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__kdcU6
                                                )}
                                              >
                                                {"Option 2"}
                                              </div>
                                            </AntdRadio>
                                          </AntdRadioGroup>
                                        );
                                      })()}
                                    </div>
                                  );
                                })}
                              </div>
                            </AntdTabItem>
                            <AntdTabItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabItem___99Cax
                              )}
                              key={"2"}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__z4Sf4
                                  )}
                                >
                                  {"Lunch"}
                                </div>
                              }
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aMl8Y
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.query4.data.filter(
                                        item =>
                                          item.partnerid === currentItem.id &&
                                          item.category === "lunch"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___5IHdI
                                      )}
                                      key={currentIndex}
                                    >
                                      <h6
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h6,
                                          projectcss.__wab_text,
                                          sty.h6__fyU9X
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.description;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Lunch Options";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h6>
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.radioGroup3
                                          ),
                                          onChange: generateStateOnChangeProp(
                                            $state,
                                            [
                                              "radioGroup3",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          ),
                                          optionType: "button",
                                          options: (() => {
                                            const __composite = [
                                              { value: null, label: null },
                                              { value: null, label: null },
                                              { value: null, label: null }
                                            ];

                                            __composite["0"]["value"] =
                                              currentItem.low_price;
                                            __composite["0"]["label"] =
                                              "Serves: 15 | $" +
                                              currentItem.low_price.toFixed(2);
                                            __composite["1"]["value"] =
                                              currentItem.medium_price;
                                            __composite["1"]["label"] =
                                              "30 | $" +
                                              currentItem.medium_price.toFixed(
                                                2
                                              );
                                            __composite["2"]["value"] =
                                              currentItem.high_price;
                                            __composite["2"]["label"] =
                                              "60 | $" +
                                              currentItem.high_price.toFixed(2);
                                            return __composite;
                                          })(),
                                          value: generateStateValueProp(
                                            $state,
                                            [
                                              "radioGroup3",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "radioGroup3[][].value"
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1],
                                          undefined ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "radioGroup3[][].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <AntdRadioGroup
                                            data-plasmic-name={"radioGroup3"}
                                            data-plasmic-override={
                                              overrides.radioGroup3
                                            }
                                            {...child$Props}
                                          >
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio__amsmh
                                              )}
                                              value={"op1"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__uLnv1
                                                )}
                                              >
                                                {"Option 1"}
                                              </div>
                                            </AntdRadio>
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio__lW7Er
                                              )}
                                              value={"op2"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__i9Asu
                                                )}
                                              >
                                                {"Option 2"}
                                              </div>
                                            </AntdRadio>
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio__dso2D
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__mcazg
                                                )}
                                              >
                                                {"Radio"}
                                              </div>
                                            </AntdRadio>
                                          </AntdRadioGroup>
                                        );
                                      })()}
                                    </div>
                                  );
                                })}
                              </div>
                            </AntdTabItem>
                            <AntdTabItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabItem__t2Fgo
                              )}
                              label={"Dinner"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dbZ2L
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.query4.data.filter(
                                        item =>
                                          item.partnerid === currentItem.id &&
                                          item.category === "dinner"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__jCrrV
                                      )}
                                      key={currentIndex}
                                    >
                                      <h6
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h6,
                                          projectcss.__wab_text,
                                          sty.h6__xmGy
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.description;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Dinner Options";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h6>
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.radioGroup2
                                          ),
                                          onChange: generateStateOnChangeProp(
                                            $state,
                                            [
                                              "radioGroup2",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          ),
                                          optionType: "button",
                                          options: (() => {
                                            const __composite = [
                                              { value: null, label: null },
                                              { value: null, label: null },
                                              { value: null, label: null }
                                            ];

                                            __composite["0"]["value"] =
                                              currentItem.low_price;
                                            __composite["0"]["label"] =
                                              "Serves 15 | $" +
                                              currentItem.low_price.toFixed(2);
                                            __composite["1"]["value"] =
                                              currentItem.medium_price;
                                            __composite["1"]["label"] =
                                              "30 | $" +
                                              currentItem.medium_price.toFixed(
                                                2
                                              );
                                            __composite["2"]["value"] =
                                              currentItem.high_price;
                                            __composite["2"]["label"] =
                                              "60 | $" +
                                              currentItem.high_price.toFixed(2);
                                            return __composite;
                                          })(),
                                          value: generateStateValueProp(
                                            $state,
                                            [
                                              "radioGroup2",
                                              __plasmic_idx_0,
                                              __plasmic_idx_1,
                                              "value"
                                            ]
                                          )
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "value",
                                              plasmicStateName:
                                                "radioGroup2[][].value"
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1],
                                          undefined ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "radioGroup2[][].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => undefined
                                            }
                                          ],

                                          [__plasmic_idx_0, __plasmic_idx_1]
                                        );
                                        return (
                                          <AntdRadioGroup
                                            data-plasmic-name={"radioGroup2"}
                                            data-plasmic-override={
                                              overrides.radioGroup2
                                            }
                                            {...child$Props}
                                          >
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio__e9FoP
                                              )}
                                              value={"op1"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___8IeYo
                                                )}
                                              >
                                                {"Option 1"}
                                              </div>
                                            </AntdRadio>
                                            <AntdRadio
                                              className={classNames(
                                                "__wab_instance",
                                                sty.radio___8EqX
                                              )}
                                              value={"op2"}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__ko4Cg
                                                )}
                                              >
                                                {"Option 2"}
                                              </div>
                                            </AntdRadio>
                                          </AntdRadioGroup>
                                        );
                                      })()}
                                    </div>
                                  );
                                })}
                              </div>
                            </AntdTabItem>
                          </React.Fragment>
                        ),

                        onChange: generateStateOnChangeProp($state, [
                          "tabs",
                          __plasmic_idx_0,
                          "activeKey"
                        ]),
                        sticky: false,
                        tabBarBackground: "#FFF",
                        tabsDropdownScopeClassName: sty["tabs__tabsDropdown"],
                        tabsScopeClassName: sty["tabs__tabs"]
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "activeKey",
                            plasmicStateName: "tabs[].activeKey"
                          }
                        ],

                        [__plasmic_idx_0],
                        undefined ?? {},
                        child$Props
                      );
                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "tabs[].activeKey",
                            initFunc: ({ $props, $state, $queries }) =>
                              undefined
                          }
                        ],

                        [__plasmic_idx_0]
                      );
                      return (
                        <AntdTabs
                          data-plasmic-name={"tabs"}
                          data-plasmic-override={overrides.tabs}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              </section>
            );
          })}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "h4",
    "tabs",
    "radioGroup",
    "radioGroup3",
    "radioGroup2"
  ],

  section: [
    "section",
    "h1",
    "h4",
    "tabs",
    "radioGroup",
    "radioGroup3",
    "radioGroup2"
  ],

  h1: ["h1"],
  h4: ["h4"],
  tabs: ["tabs", "radioGroup", "radioGroup3", "radioGroup2"],
  radioGroup: ["radioGroup"],
  radioGroup3: ["radioGroup3"],
  radioGroup2: ["radioGroup2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewCateringIntake__ArgProps,
          internalVariantPropNames: PlasmicNewCateringIntake__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewCateringIntake__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewCateringIntake";
  } else {
    func.displayName = `PlasmicNewCateringIntake.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"m9sTNijpsuGxLr6622n67c"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "m9sTNijpsuGxLr6622n67c"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewCateringIntake = Object.assign(
  // Top-level PlasmicNewCateringIntake renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    tabs: makeNodeComponent("tabs"),
    radioGroup: makeNodeComponent("radioGroup"),
    radioGroup3: makeNodeComponent("radioGroup3"),
    radioGroup2: makeNodeComponent("radioGroup2"),
    // Metadata about props expected for PlasmicNewCateringIntake
    internalVariantProps: PlasmicNewCateringIntake__VariantProps,
    internalArgProps: PlasmicNewCateringIntake__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewCateringIntake;
/* prettier-ignore-end */
