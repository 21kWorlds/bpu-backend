// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: 3gDeoVff23-u
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: x2bZy_YU1m2F/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdCheckbox } from "@plasmicpkgs/antd5/skinny/registerCheckbox";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: 3gDeoVff23-u/css

createPlasmicElementProxy;

export const PlasmicNewPage__VariantProps = new Array();

export const PlasmicNewPage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data[0].status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "checkbox.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input11.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input12.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input13.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input14.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input21.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.form.value.date;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textarea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "This is a text area."
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "e485c98d-04cd-445c-b59a-bf08fac7919b",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.e485c98d-04cd-445c-b59a-bf08fac7919b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.query.data[0].description;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Page title";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onFinish: async values => {
                        const $steps = {};
                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "4ACnaEgTThrwyGmam4pjE6",
                                  opId: "c8c2aacc-98a2-4264-8c1c-16c21a9ba44c",
                                  userArgs: {
                                    conditions: [$ctx.params.id],
                                    variables: [$state.form.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }
                      },
                      onFinishFailed: async data => {
                        const $steps = {};
                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: ["error", "this didn't work. Sorry"]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"form"}
                        data-plasmic-override={overrides.form}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___96Tr2
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"date"}
                            data-plasmic-override={overrides.date}
                            className={classNames("__wab_instance", sty.date)}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].date;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={"date"}
                            name={"date"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zC8Fz
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dateTimePicker
                                  ),
                                  defaultValue: (() => {
                                    try {
                                      return $state.form.value.date;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["dateTimePicker", "value"],
                                      AntdDatePicker_Helpers
                                    ),
                                  picker: "date",
                                  popupScopeClassName:
                                    sty["dateTimePicker__datePickerPopup"],
                                  showTime: false,
                                  value: generateStateValueProp($state, [
                                    "dateTimePicker",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "dateTimePicker.value"
                                    }
                                  ],

                                  [],
                                  AntdDatePicker_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdDatePicker
                                    data-plasmic-name={"dateTimePicker"}
                                    data-plasmic-override={
                                      overrides.dateTimePicker
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"status"}
                            data-plasmic-override={overrides.status}
                            className={classNames("__wab_instance", sty.status)}
                            initialValue={$queries.query.data[0].status}
                            label={"status"}
                            name={"status"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yuFjo
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input2
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input2", "value"],
                                      AntdInput_Helpers
                                    ),
                                  value: generateStateValueProp($state, [
                                    "input2",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input2.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input2"}
                                    data-plasmic-override={overrides.input2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"_public"}
                            data-plasmic-override={overrides._public}
                            className={classNames(
                              "__wab_instance",
                              sty._public
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0]["public"];
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eCcWn
                                )}
                              >
                                {"Label"}
                              </div>
                            }
                            name={"public"}
                            noLabel={true}
                            noStyle={false}
                          >
                            <AntdCheckbox
                              data-plasmic-name={"checkbox"}
                              data-plasmic-override={overrides.checkbox}
                              checked={generateStateValueProp($state, [
                                "checkbox",
                                "checked"
                              ])}
                              className={classNames(
                                "__wab_instance",
                                sty.checkbox
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "checkbox",
                                "checked"
                              ])}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zUvPn
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hDpzP
                                  )}
                                >
                                  {"public"}
                                </div>
                              </div>
                            </AntdCheckbox>
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          data-plasmic-name={"description"}
                          data-plasmic-override={overrides.description}
                          className={classNames(
                            "__wab_instance",
                            sty.description
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.query.data[0].description;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"description"}
                          name={"description"}
                        >
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.input3
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input3", "value"],
                                  AntdInput_Helpers
                                ),
                              value: generateStateValueProp($state, [
                                "input3",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input3.value"
                                }
                              ],

                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdInput
                                data-plasmic-name={"input3"}
                                data-plasmic-override={overrides.input3}
                                {...child$Props}
                              />
                            );
                          })()}
                        </FormItemWrapper>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mf4L
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"contactId"}
                            data-plasmic-override={overrides.contactId}
                            className={classNames(
                              "__wab_instance",
                              sty.contactId
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].contactID;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={"contactID"}
                            name={"contactID"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input5
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input5", "value"],
                                    AntdInput_Helpers
                                  ),
                                value: generateStateValueProp($state, [
                                  "input5",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input5.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input5"}
                                  data-plasmic-override={overrides.input5}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"eventId"}
                            data-plasmic-override={overrides.eventId}
                            className={classNames(
                              "__wab_instance",
                              sty.eventId
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].eventID;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={"eventID"}
                            name={"eventID"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input6
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input6", "value"],
                                    AntdInput_Helpers
                                  ),
                                value: generateStateValueProp($state, [
                                  "input6",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input6.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input6"}
                                  data-plasmic-override={overrides.input6}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          data-plasmic-name={"userNotes"}
                          data-plasmic-override={overrides.userNotes}
                          className={classNames(
                            "__wab_instance",
                            sty.userNotes
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.query.data[0].user_notes;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return (() => {
                                  try {
                                    return $queries.query.data[0].user_notes;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })();
                              }
                              throw e;
                            }
                          })()}
                          label={"user_notes"}
                          name={"user_notes"}
                        >
                          <textarea
                            data-plasmic-name={"textarea"}
                            data-plasmic-override={overrides.textarea}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea
                            )}
                            onChange={e => {
                              generateStateOnChangeProp($state, [
                                "textarea",
                                "value"
                              ])(e.target.value);
                            }}
                            ref={ref => {
                              $refs["textarea"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oxOl3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hE9Jg
                            )}
                          >
                            <FormItemWrapper
                              data-plasmic-name={"lodgeStart"}
                              data-plasmic-override={overrides.lodgeStart}
                              className={classNames(
                                "__wab_instance",
                                sty.lodgeStart
                              )}
                              initialValue={(() => {
                                try {
                                  return $queries.query.data[0].lodge_start;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"lodge_start"}
                              name={"lodge_start"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input9
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input9", "value"],
                                      AntdInput_Helpers
                                    ),
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input9",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input9.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input9"}
                                    data-plasmic-override={overrides.input9}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"lodgeEnd"}
                              data-plasmic-override={overrides.lodgeEnd}
                              className={classNames(
                                "__wab_instance",
                                sty.lodgeEnd
                              )}
                              initialValue={(() => {
                                try {
                                  return $queries.query.data[0].lodge_end;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"lodge_end"}
                              name={"lodge_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input10
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input10", "value"],
                                      AntdInput_Helpers
                                    ),
                                  placeholder: ``,
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input10",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input10.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input10"}
                                    data-plasmic-override={overrides.input10}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nxpmA
                            )}
                          >
                            <FormItemWrapper
                              data-plasmic-name={"libraryStart"}
                              data-plasmic-override={overrides.libraryStart}
                              className={classNames(
                                "__wab_instance",
                                sty.libraryStart
                              )}
                              initialValue={(() => {
                                try {
                                  return $queries.query.data[0].library_start;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"library_start"}
                              name={"library_start"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input11
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input11", "value"],
                                      AntdInput_Helpers
                                    ),
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input11",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input11.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input11"}
                                    data-plasmic-override={overrides.input11}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"libraryEnd"}
                              data-plasmic-override={overrides.libraryEnd}
                              className={classNames(
                                "__wab_instance",
                                sty.libraryEnd
                              )}
                              initialValue={(() => {
                                try {
                                  return $queries.query.data[0].library_end;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"library_end"}
                              name={"library_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input12
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input12", "value"],
                                      AntdInput_Helpers
                                    ),
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input12",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input12.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input12"}
                                    data-plasmic-override={overrides.input12}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uEbHe
                            )}
                          >
                            <FormItemWrapper
                              data-plasmic-name={"kitchenStart"}
                              data-plasmic-override={overrides.kitchenStart}
                              className={classNames(
                                "__wab_instance",
                                sty.kitchenStart
                              )}
                              initialValue={(() => {
                                try {
                                  return undefined;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"kitchen_start"}
                              name={"kitchen_start"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input13
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input13", "value"],
                                      AntdInput_Helpers
                                    ),
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input13",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input13.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input13"}
                                    data-plasmic-override={overrides.input13}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              data-plasmic-name={"kitchenEnd"}
                              data-plasmic-override={overrides.kitchenEnd}
                              className={classNames(
                                "__wab_instance",
                                sty.kitchenEnd
                              )}
                              initialValue={(() => {
                                try {
                                  return $queries.query.data[0].kitchen_end;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              label={"kitchen_end"}
                              name={"kitchen_end"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input14
                                  ),
                                  onChange:
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input14", "value"],
                                      AntdInput_Helpers
                                    ),
                                  type: "time",
                                  value: generateStateValueProp($state, [
                                    "input14",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input14.value"
                                    }
                                  ],

                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );
                                return (
                                  <AntdInput
                                    data-plasmic-name={"input14"}
                                    data-plasmic-override={overrides.input14}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                          </div>
                        </div>
                        <FormItemWrapper
                          data-plasmic-name={"cateringPref"}
                          data-plasmic-override={overrides.cateringPref}
                          className={classNames(
                            "__wab_instance",
                            sty.cateringPref
                          )}
                          initialValue={(() => {
                            try {
                              return $queries.query.data[0].catering_pref;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          label={"catering_pref"}
                          name={"catering_pref"}
                        >
                          <AntdSelect
                            data-plasmic-name={"select"}
                            data-plasmic-override={overrides.select}
                            className={classNames("__wab_instance", sty.select)}
                            defaultStylesClassName={classNames(
                              projectcss.root_reset,
                              projectcss.plasmic_default_styles,
                              projectcss.plasmic_mixins,
                              projectcss.plasmic_tokens,
                              plasmic_antd_5_hostless_css.plasmic_tokens,
                              plasmic_plasmic_rich_components_css.plasmic_tokens
                            )}
                            onChange={generateStateOnChangeProp($state, [
                              "select",
                              "value"
                            ])}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null, type: "option" },
                                { value: null, label: null, type: "option" },
                                { type: "option", value: null, label: null },
                                { type: "option", value: null, label: null },
                                { type: "option", value: null, label: null }
                              ];

                              __composite["0"]["value"] = "Community";
                              __composite["0"]["label"] =
                                "Please send me more information about your Community Caterers";
                              __composite["1"]["value"] = "Outside";
                              __composite["1"]["label"] =
                                "I'd like to bring in outside Catering";
                              __composite["2"]["value"] = "Snacks";
                              __composite["2"]["label"] =
                                "Please tell me about your snack packages!";
                              __composite["3"]["value"] = "OutSnack";
                              __composite["3"]["label"] =
                                "I'll be bringing my own snacks!";
                              __composite["4"]["value"] = "None";
                              __composite["4"]["label"] = "No, thank you!";
                              return __composite;
                            })()}
                            placeholder={"Select..."}
                            popupScopeClassName={sty["select__popup"]}
                            value={generateStateValueProp($state, [
                              "select",
                              "value"
                            ])}
                          />
                        </FormItemWrapper>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vBNhy
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"coffeePref"}
                            data-plasmic-override={overrides.coffeePref}
                            className={classNames(
                              "__wab_instance",
                              sty.coffeePref
                            )}
                            initialValue={$queries.query.data[0].coffee_pref}
                            label={"coffee_pref"}
                            name={"coffee_pref"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vw3Dk
                              )}
                            >
                              <AntdSelect
                                data-plasmic-name={"select2"}
                                data-plasmic-override={overrides.select2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select2
                                )}
                                defaultStylesClassName={classNames(
                                  projectcss.root_reset,
                                  projectcss.plasmic_default_styles,
                                  projectcss.plasmic_mixins,
                                  projectcss.plasmic_tokens,
                                  plasmic_antd_5_hostless_css.plasmic_tokens,
                                  plasmic_plasmic_rich_components_css.plasmic_tokens
                                )}
                                onChange={generateStateOnChangeProp($state, [
                                  "select2",
                                  "value"
                                ])}
                                options={(() => {
                                  const __composite = [
                                    {
                                      value: null,
                                      label: null,
                                      type: "option"
                                    },
                                    {
                                      value: null,
                                      label: null,
                                      type: "option"
                                    },
                                    {
                                      type: "option",
                                      value: null,
                                      label: null
                                    },
                                    {
                                      type: "option",
                                      value: null,
                                      label: null
                                    }
                                  ];

                                  __composite["0"]["value"] = "Standard";
                                  __composite["0"]["label"] = "Standard";
                                  __composite["1"]["value"] = "Carafes";
                                  __composite["1"]["label"] = "Carafes";
                                  __composite["2"]["value"] = "Custom";
                                  __composite["2"]["label"] = "Custom";
                                  __composite["3"]["value"] = "None";
                                  __composite["3"]["label"] = "None";
                                  return __composite;
                                })()}
                                placeholder={"Select..."}
                                popupScopeClassName={sty["select2__popup"]}
                                value={generateStateValueProp($state, [
                                  "select2",
                                  "value"
                                ])}
                              />
                            </div>
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"carafeNo"}
                            data-plasmic-override={overrides.carafeNo}
                            className={classNames(
                              "__wab_instance",
                              sty.carafeNo
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].carafe_no;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {};
                                }
                                throw e;
                              }
                            })()}
                            label={"carafe_no"}
                            name={"carafe_no"}
                          >
                            <AntdInputNumber
                              data-plasmic-name={"numberInput"}
                              data-plasmic-override={overrides.numberInput}
                              className={classNames(
                                "__wab_instance",
                                sty.numberInput
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "numberInput",
                                "value"
                              ])}
                              type={"number"}
                              value={generateStateValueProp($state, [
                                "numberInput",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v1KPs
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"staging"}
                            data-plasmic-override={overrides.staging}
                            className={classNames(
                              "__wab_instance",
                              sty.staging
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].staging;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___2Cwbp
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1PptR
                                  )}
                                >
                                  {"staging"}
                                </div>
                              </div>
                            }
                            name={"staging"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select6"}
                              data-plasmic-override={overrides.select6}
                              className={classNames(
                                "__wab_instance",
                                sty.select6
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "select6",
                                "value"
                              ])}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null, type: "option" },
                                  { value: null, label: null, type: "option" },
                                  { type: "option", value: null, label: null }
                                ];

                                __composite["0"]["value"] = "two of one";
                                __composite["0"]["label"] =
                                  "(2) panels of 1 size";
                                __composite["1"]["value"] = "four of two";
                                __composite["1"]["label"] =
                                  "(4) panels of 2 sizes";
                                __composite["2"]["value"] = "all eight";
                                __composite["2"]["label"] = "All (8) panels";
                                return __composite;
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["select6__popup"]}
                              value={generateStateValueProp($state, [
                                "select6",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"lighting"}
                            data-plasmic-override={overrides.lighting}
                            className={classNames(
                              "__wab_instance",
                              sty.lighting
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].lighting;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cjPNh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___9TzLz
                                  )}
                                >
                                  {"lighting"}
                                </div>
                              </div>
                            }
                            name={"lighting"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select4"}
                              data-plasmic-override={overrides.select4}
                              className={classNames(
                                "__wab_instance",
                                sty.select4
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "select4",
                                "value"
                              ])}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null, type: "option" },
                                  { value: null, label: null, type: "option" }
                                ];

                                __composite["0"]["value"] = "Small";
                                __composite["0"]["label"] = "Small";
                                __composite["1"]["value"] = "Large";
                                __composite["1"]["label"] = "Large";
                                return __composite;
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["select4__popup"]}
                              value={generateStateValueProp($state, [
                                "select4",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"sound"}
                            data-plasmic-override={overrides.sound}
                            className={classNames("__wab_instance", sty.sound)}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].sound;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nfSww
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xg4Jf
                                  )}
                                >
                                  {"sound"}
                                </div>
                              </div>
                            }
                            name={"sound"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select5"}
                              data-plasmic-override={overrides.select5}
                              className={classNames(
                                "__wab_instance",
                                sty.select5
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "select5",
                                "value"
                              ])}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null, type: "option" },
                                  { value: null, label: null, type: "option" },
                                  { type: "option", value: null, label: null }
                                ];

                                __composite["0"]["value"] = "Small";
                                __composite["0"]["label"] = "Small";
                                __composite["1"]["value"] = "Medium";
                                __composite["1"]["label"] = "Medium";
                                __composite["2"]["value"] = "Large";
                                __composite["2"]["label"] = "Large";
                                return __composite;
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["select5__popup"]}
                              value={generateStateValueProp($state, [
                                "select5",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"presentation"}
                            data-plasmic-override={overrides.presentation}
                            className={classNames(
                              "__wab_instance",
                              sty.presentation
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].presentation;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__hmQiH
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nRadf
                                  )}
                                >
                                  {"presentation"}
                                </div>
                              </div>
                            }
                            name={"presentation"}
                          >
                            <AntdSelect
                              data-plasmic-name={"select3"}
                              data-plasmic-override={overrides.select3}
                              className={classNames(
                                "__wab_instance",
                                sty.select3
                              )}
                              defaultStylesClassName={classNames(
                                projectcss.root_reset,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "select3",
                                "value"
                              ])}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null, type: "option" },
                                  { value: null, label: null, type: "option" }
                                ];

                                __composite["0"]["value"] = "Projector";
                                __composite["0"]["label"] = "Projector";
                                __composite["1"]["value"] = "SmartBoard";
                                __composite["1"]["label"] = "SmartBoard";
                                return __composite;
                              })()}
                              placeholder={"Select..."}
                              popupScopeClassName={sty["select3__popup"]}
                              value={generateStateValueProp($state, [
                                "select3",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hskqk
                          )}
                        >
                          <FormItemWrapper
                            data-plasmic-name={"subAmount"}
                            data-plasmic-override={overrides.subAmount}
                            className={classNames(
                              "__wab_instance",
                              sty.subAmount
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].subsidy_amount;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return {};
                                }
                                throw e;
                              }
                            })()}
                            label={"subsidy_amount"}
                            name={"subsidy_amount"}
                          >
                            <AntdInputNumber
                              data-plasmic-name={"numberInput2"}
                              data-plasmic-override={overrides.numberInput2}
                              className={classNames(
                                "__wab_instance",
                                sty.numberInput2
                              )}
                              onChange={generateStateOnChangeProp($state, [
                                "numberInput2",
                                "value"
                              ])}
                              type={"number"}
                              value={generateStateValueProp($state, [
                                "numberInput2",
                                "value"
                              ])}
                            />
                          </FormItemWrapper>
                          <FormItemWrapper
                            data-plasmic-name={"subReason"}
                            data-plasmic-override={overrides.subReason}
                            className={classNames(
                              "__wab_instance",
                              sty.subReason
                            )}
                            initialValue={(() => {
                              try {
                                return $queries.query.data[0].subsidy_reason;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            label={"subsidy_reason"}
                            name={"subsidy_reason"}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.input21
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input21", "value"],
                                    AntdInput_Helpers
                                  ),
                                value: generateStateValueProp($state, [
                                  "input21",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input21.value"
                                  }
                                ],

                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdInput
                                  data-plasmic-name={"input21"}
                                  data-plasmic-override={overrides.input21}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </FormItemWrapper>
                        </div>
                        <FormItemWrapper
                          data-plasmic-name={"clientNotes"}
                          data-plasmic-override={overrides.clientNotes}
                          className={classNames(
                            "__wab_instance",
                            sty.clientNotes
                          )}
                          initialValue={$queries.query.data[0].client_notes}
                          label={"client_notes"}
                          name={"client_notes"}
                        >
                          <textarea
                            data-plasmic-name={"textarea2"}
                            data-plasmic-override={overrides.textarea2}
                            className={classNames(
                              projectcss.all,
                              projectcss.textarea,
                              sty.textarea2
                            )}
                            onChange={e => {
                              generateStateOnChangeProp($state, [
                                "textarea2",
                                "value"
                              ])(e.target.value);
                            }}
                            ref={ref => {
                              $refs["textarea2"] = ref;
                            }}
                            value={
                              generateStateValueProp($state, [
                                "textarea2",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </FormItemWrapper>
                        <AntdButton
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          onClick={async () => {
                            const $steps = {};
                          }}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oNQbP
                            )}
                          >
                            {"Submit"}
                          </div>
                        </AntdButton>
                      </FormWrapper>
                    );
                  })()}
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "form",
    "date",
    "dateTimePicker",
    "status",
    "input2",
    "_public",
    "checkbox",
    "description",
    "input3",
    "contactId",
    "input5",
    "eventId",
    "input6",
    "userNotes",
    "textarea",
    "lodgeStart",
    "input9",
    "lodgeEnd",
    "input10",
    "libraryStart",
    "input11",
    "libraryEnd",
    "input12",
    "kitchenStart",
    "input13",
    "kitchenEnd",
    "input14",
    "cateringPref",
    "select",
    "coffeePref",
    "select2",
    "carafeNo",
    "numberInput",
    "staging",
    "select6",
    "lighting",
    "select4",
    "sound",
    "select5",
    "presentation",
    "select3",
    "subAmount",
    "numberInput2",
    "subReason",
    "input21",
    "clientNotes",
    "textarea2",
    "button"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "form",
    "date",
    "dateTimePicker",
    "status",
    "input2",
    "_public",
    "checkbox",
    "description",
    "input3",
    "contactId",
    "input5",
    "eventId",
    "input6",
    "userNotes",
    "textarea",
    "lodgeStart",
    "input9",
    "lodgeEnd",
    "input10",
    "libraryStart",
    "input11",
    "libraryEnd",
    "input12",
    "kitchenStart",
    "input13",
    "kitchenEnd",
    "input14",
    "cateringPref",
    "select",
    "coffeePref",
    "select2",
    "carafeNo",
    "numberInput",
    "staging",
    "select6",
    "lighting",
    "select4",
    "sound",
    "select5",
    "presentation",
    "select3",
    "subAmount",
    "numberInput2",
    "subReason",
    "input21",
    "clientNotes",
    "textarea2",
    "button"
  ],

  section: [
    "section",
    "h1",
    "form",
    "date",
    "dateTimePicker",
    "status",
    "input2",
    "_public",
    "checkbox",
    "description",
    "input3",
    "contactId",
    "input5",
    "eventId",
    "input6",
    "userNotes",
    "textarea",
    "lodgeStart",
    "input9",
    "lodgeEnd",
    "input10",
    "libraryStart",
    "input11",
    "libraryEnd",
    "input12",
    "kitchenStart",
    "input13",
    "kitchenEnd",
    "input14",
    "cateringPref",
    "select",
    "coffeePref",
    "select2",
    "carafeNo",
    "numberInput",
    "staging",
    "select6",
    "lighting",
    "select4",
    "sound",
    "select5",
    "presentation",
    "select3",
    "subAmount",
    "numberInput2",
    "subReason",
    "input21",
    "clientNotes",
    "textarea2",
    "button"
  ],

  h1: ["h1"],
  form: [
    "form",
    "date",
    "dateTimePicker",
    "status",
    "input2",
    "_public",
    "checkbox",
    "description",
    "input3",
    "contactId",
    "input5",
    "eventId",
    "input6",
    "userNotes",
    "textarea",
    "lodgeStart",
    "input9",
    "lodgeEnd",
    "input10",
    "libraryStart",
    "input11",
    "libraryEnd",
    "input12",
    "kitchenStart",
    "input13",
    "kitchenEnd",
    "input14",
    "cateringPref",
    "select",
    "coffeePref",
    "select2",
    "carafeNo",
    "numberInput",
    "staging",
    "select6",
    "lighting",
    "select4",
    "sound",
    "select5",
    "presentation",
    "select3",
    "subAmount",
    "numberInput2",
    "subReason",
    "input21",
    "clientNotes",
    "textarea2",
    "button"
  ],

  date: ["date", "dateTimePicker"],
  dateTimePicker: ["dateTimePicker"],
  status: ["status", "input2"],
  input2: ["input2"],
  _public: ["_public", "checkbox"],
  checkbox: ["checkbox"],
  description: ["description", "input3"],
  input3: ["input3"],
  contactId: ["contactId", "input5"],
  input5: ["input5"],
  eventId: ["eventId", "input6"],
  input6: ["input6"],
  userNotes: ["userNotes", "textarea"],
  textarea: ["textarea"],
  lodgeStart: ["lodgeStart", "input9"],
  input9: ["input9"],
  lodgeEnd: ["lodgeEnd", "input10"],
  input10: ["input10"],
  libraryStart: ["libraryStart", "input11"],
  input11: ["input11"],
  libraryEnd: ["libraryEnd", "input12"],
  input12: ["input12"],
  kitchenStart: ["kitchenStart", "input13"],
  input13: ["input13"],
  kitchenEnd: ["kitchenEnd", "input14"],
  input14: ["input14"],
  cateringPref: ["cateringPref", "select"],
  select: ["select"],
  coffeePref: ["coffeePref", "select2"],
  select2: ["select2"],
  carafeNo: ["carafeNo", "numberInput"],
  numberInput: ["numberInput"],
  staging: ["staging", "select6"],
  select6: ["select6"],
  lighting: ["lighting", "select4"],
  select4: ["select4"],
  sound: ["sound", "select5"],
  select5: ["select5"],
  presentation: ["presentation", "select3"],
  select3: ["select3"],
  subAmount: ["subAmount", "numberInput2"],
  numberInput2: ["numberInput2"],
  subReason: ["subReason", "input21"],
  input21: ["input21"],
  clientNotes: ["clientNotes", "textarea2"],
  textarea2: ["textarea2"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"m9sTNijpsuGxLr6622n67c"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "m9sTNijpsuGxLr6622n67c"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    date: makeNodeComponent("date"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    status: makeNodeComponent("status"),
    input2: makeNodeComponent("input2"),
    _public: makeNodeComponent("_public"),
    checkbox: makeNodeComponent("checkbox"),
    description: makeNodeComponent("description"),
    input3: makeNodeComponent("input3"),
    contactId: makeNodeComponent("contactId"),
    input5: makeNodeComponent("input5"),
    eventId: makeNodeComponent("eventId"),
    input6: makeNodeComponent("input6"),
    userNotes: makeNodeComponent("userNotes"),
    textarea: makeNodeComponent("textarea"),
    lodgeStart: makeNodeComponent("lodgeStart"),
    input9: makeNodeComponent("input9"),
    lodgeEnd: makeNodeComponent("lodgeEnd"),
    input10: makeNodeComponent("input10"),
    libraryStart: makeNodeComponent("libraryStart"),
    input11: makeNodeComponent("input11"),
    libraryEnd: makeNodeComponent("libraryEnd"),
    input12: makeNodeComponent("input12"),
    kitchenStart: makeNodeComponent("kitchenStart"),
    input13: makeNodeComponent("input13"),
    kitchenEnd: makeNodeComponent("kitchenEnd"),
    input14: makeNodeComponent("input14"),
    cateringPref: makeNodeComponent("cateringPref"),
    select: makeNodeComponent("select"),
    coffeePref: makeNodeComponent("coffeePref"),
    select2: makeNodeComponent("select2"),
    carafeNo: makeNodeComponent("carafeNo"),
    numberInput: makeNodeComponent("numberInput"),
    staging: makeNodeComponent("staging"),
    select6: makeNodeComponent("select6"),
    lighting: makeNodeComponent("lighting"),
    select4: makeNodeComponent("select4"),
    sound: makeNodeComponent("sound"),
    select5: makeNodeComponent("select5"),
    presentation: makeNodeComponent("presentation"),
    select3: makeNodeComponent("select3"),
    subAmount: makeNodeComponent("subAmount"),
    numberInput2: makeNodeComponent("numberInput2"),
    subReason: makeNodeComponent("subReason"),
    input21: makeNodeComponent("input21"),
    clientNotes: makeNodeComponent("clientNotes"),
    textarea2: makeNodeComponent("textarea2"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
