// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: BMcbq5bHB84h
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicPageGuard as PlasmicPageGuard__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: x2bZy_YU1m2F/component
import { AntdSwitch } from "@plasmicpkgs/antd5/skinny/registerSwitch";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: BMcbq5bHB84h/css

createPlasmicElementProxy;

export const PlasmicNewPage2__VariantProps = new Array();

export const PlasmicNewPage2__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data[0].date;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data[0].description;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "_switch.checked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "4ACnaEgTThrwyGmam4pjE6",
        opId: "e485c98d-04cd-445c-b59a-bf08fac7919b",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.e485c98d-04cd-445c-b59a-bf08fac7919b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__svhMj)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query.data[0].description;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Page title";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </h1>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a321C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__orBmB
                        )}
                      >
                        {"Public:"}
                      </div>
                      <AntdSwitch
                        data-plasmic-name={"_switch"}
                        data-plasmic-override={overrides._switch}
                        checked={generateStateValueProp($state, [
                          "_switch",
                          "checked"
                        ])}
                        className={classNames("__wab_instance", sty._switch)}
                        onChange={generateStateOnChangeProp($state, [
                          "_switch",
                          "checked"
                        ])}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zyQe7)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wLqEo
                      )}
                    >
                      {"Date:"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.dateTimePicker
                        ),
                        defaultValue: (() => {
                          try {
                            return $queries.query.data[0].date;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["dateTimePicker", "value"],
                          AntdDatePicker_Helpers
                        ),
                        popupScopeClassName:
                          sty["dateTimePicker__datePickerPopup"],
                        value: generateStateValueProp($state, [
                          "dateTimePicker",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "dateTimePicker.value"
                          }
                        ],

                        [],
                        AntdDatePicker_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdDatePicker
                          data-plasmic-name={"dateTimePicker"}
                          data-plasmic-override={overrides.dateTimePicker}
                          {...child$Props}
                        />
                      );
                    })()}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rGpvj
                      )}
                    >
                      {"Description:"}
                    </div>
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["input", "value"],
                          AntdInput_Helpers
                        ),
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],

                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );
                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kNMp9)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__cdNgr
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gdjHl
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input7),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input7", "value"],
                            AntdInput_Helpers
                          ),
                          placeholder: (() => {
                            try {
                              return $queries.query.data[0].lodge_start;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "input7",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input7.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input7"}
                            data-plasmic-override={overrides.input7}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__zjcEa
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__adzm1
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input5),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input5", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "input5",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input5.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input5"}
                            data-plasmic-override={overrides.input5}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__n1Oza
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__clYng
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input6),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input6", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "input6",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input6.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input6"}
                            data-plasmic-override={overrides.input6}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__x2JLe)}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__rb1Ms
                      )}
                      initialValue={(() => {
                        try {
                          return $queries.query.data[0].lodge_end;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__civkl
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__w3Nyz
                        )}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input8),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input8", "value"],
                                AntdInput_Helpers
                              ),
                            type: "time",
                            value: generateStateValueProp($state, [
                              "input8",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input8.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input8"}
                              data-plasmic-override={overrides.input8}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__urYna
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e19Mb
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input9),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input9", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "input9",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input9.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input9"}
                            data-plasmic-override={overrides.input9}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dbk51
                      )}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nk1TF
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input10),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input10", "value"],
                            AntdInput_Helpers
                          ),
                          type: "time",
                          value: generateStateValueProp($state, [
                            "input10",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input10.value"
                            }
                          ],

                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdInput
                            data-plasmic-name={"input10"}
                            data-plasmic-override={overrides.input10}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.dateTimePicker2
                      ),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["dateTimePicker2", "value"],
                        AntdDatePicker_Helpers
                      ),
                      popupClassName: classNames({
                        [sty["pcls_uaAEsR9MQ5ix"]]: true
                      }),
                      popupScopeClassName:
                        sty["dateTimePicker2__datePickerPopup"],
                      showTime: true,
                      value: generateStateValueProp($state, [
                        "dateTimePicker2",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "dateTimePicker2.value"
                        }
                      ],

                      [],
                      AntdDatePicker_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <AntdDatePicker
                        data-plasmic-name={"dateTimePicker2"}
                        data-plasmic-override={overrides.dateTimePicker2}
                        {...child$Props}
                      />
                    );
                  })()}
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "_switch",
    "dateTimePicker",
    "input",
    "input7",
    "input5",
    "input6",
    "input8",
    "input9",
    "input10",
    "dateTimePicker2"
  ],

  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "_switch",
    "dateTimePicker",
    "input",
    "input7",
    "input5",
    "input6",
    "input8",
    "input9",
    "input10",
    "dateTimePicker2"
  ],

  section: [
    "section",
    "h1",
    "_switch",
    "dateTimePicker",
    "input",
    "input7",
    "input5",
    "input6",
    "input8",
    "input9",
    "input10",
    "dateTimePicker2"
  ],

  h1: ["h1"],
  _switch: ["_switch"],
  dateTimePicker: ["dateTimePicker"],
  input: ["input"],
  input7: ["input7"],
  input5: ["input5"],
  input6: ["input6"],
  input8: ["input8"],
  input9: ["input9"],
  input10: ["input10"],
  dateTimePicker2: ["dateTimePicker2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <PlasmicPageGuard__
      minRole={null}
      appId={"m9sTNijpsuGxLr6622n67c"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "m9sTNijpsuGxLr6622n67c"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    _switch: makeNodeComponent("_switch"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    input: makeNodeComponent("input"),
    input7: makeNodeComponent("input7"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input8: makeNodeComponent("input8"),
    input9: makeNodeComponent("input9"),
    input10: makeNodeComponent("input10"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
