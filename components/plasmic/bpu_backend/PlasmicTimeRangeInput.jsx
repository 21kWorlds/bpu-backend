// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m9sTNijpsuGxLr6622n67c
// Component: JDCQsxq2mhS7
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "../app_starter/plasmic.module.css"; // plasmic-import: m9sTNijpsuGxLr6622n67c/projectcss
import sty from "./PlasmicTimeRangeInput.module.css"; // plasmic-import: JDCQsxq2mhS7/css

createPlasmicElementProxy;

export const PlasmicTimeRangeInput__VariantProps = new Array();

export const PlasmicTimeRangeInput__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTimeRangeInput__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__aXk4E
        )}
      >
        {"Enter some text"}
      </div>
      <FormItemWrapper
        data-plasmic-name={"formField"}
        data-plasmic-override={overrides.formField}
        className={classNames("__wab_instance", sty.formField)}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ehqKz
            )}
          >
            {"Label"}
          </div>
        }
      >
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.input),
            onChange: generateStateOnChangePropForCodeComponents(
              $state,
              "value",
              ["input", "value"],
              AntdInput_Helpers
            ),
            type: "time",
            value: generateStateValueProp($state, ["input", "value"])
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "input.value"
              }
            ],

            [],
            AntdInput_Helpers ?? {},
            child$Props
          );
          return (
            <AntdInput
              data-plasmic-name={"input"}
              data-plasmic-override={overrides.input}
              {...child$Props}
            />
          );
        })()}
      </FormItemWrapper>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "formField", "input"],
  formField: ["formField", "input"],
  input: ["input"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTimeRangeInput__ArgProps,
          internalVariantPropNames: PlasmicTimeRangeInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTimeRangeInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimeRangeInput";
  } else {
    func.displayName = `PlasmicTimeRangeInput.${nodeName}`;
  }
  return func;
}

export const PlasmicTimeRangeInput = Object.assign(
  // Top-level PlasmicTimeRangeInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    formField: makeNodeComponent("formField"),
    input: makeNodeComponent("input"),
    // Metadata about props expected for PlasmicTimeRangeInput
    internalVariantProps: PlasmicTimeRangeInput__VariantProps,
    internalArgProps: PlasmicTimeRangeInput__ArgProps
  }
);

export default PlasmicTimeRangeInput;
/* prettier-ignore-end */
